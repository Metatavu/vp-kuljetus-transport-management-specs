{
  "openapi": "3.0.3",
  "info": {
    "version": "1.0.0",
    "title": "VP-Kuljetus User Management Services"
  },
  "security": [
    {
      "BearerAuth": [
        "driver",
        "manager"
      ]
    },
    {
      "ApiKeyAuth": []
    }
  ],
  "x-tyk-api-gateway": {
    "info": {
      "id": "user-management-services",
      "orgId": "vp",
      "name": "User Management Services",
      "state": {
        "active": true
      }
    },
    "upstream": {
      "url": "http://user-management"
    },
    "server": {
      "listenPath": {
        "value": "/user-management/",
        "strip": true
      }
    },
    "middleware": {
      "operations": {}
    }
  },
  "paths": {
    "/v1/system/ping": {
      "get": {
        "operationId": "ping",
        "summary": "Replies with pong",
        "description": "Replies ping with pong",
        "security": [],
        "tags": [
          "System"
        ],
        "responses": {
          "200": {
            "description": "Pong",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/drivers": {
      "get": {
        "operationId": "listDrivers",
        "summary": "List Drivers.",
        "description": "Lists Drivers.",
        "security": [
          {
            "BearerAuth": [
              "manager"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Drivers",
          "SpecManagementUI"
        ],
        "parameters": [
          {
            "name": "driverCardId",
            "in": "query",
            "description": "Filter drivers by driver card ID. Will return 0 to 1 drivers.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Filter drivers by archived status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "first",
            "in": "query",
            "description": "First result.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "Max results.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of routes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Driver"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Invalid request was sent to the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/drivers/{driverId}": {
      "get": {
        "operationId": "findDriver",
        "summary": "Find a driver.",
        "description": "Finds a driver by ID.",
        "security": [
          {
            "BearerAuth": [
              "driver",
              "manager"
            ]
          }
        ],
        "tags": [
          "Drivers",
          "SpecApp",
          "SpecManagementUI"
        ],
        "parameters": [
          {
            "name": "driverId",
            "required": true,
            "in": "path",
            "description": "driver's ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found driver",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Driver"
                }
              }
            }
          },
          "default": {
            "description": "Invalid request was sent to the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees": {
      "get": {
        "operationId": "listEmployees",
        "summary": "List Employees.",
        "description": "Lists Employees. A user is considered an employee if they're given the employee realm role.",
        "security": [
          {
            "BearerAuth": [
              "manager"
            ]
          }
        ],
        "tags": [
          "Employees",
          "SpecManagementUI"
        ],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Search string. Should search from first and last names.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "salaryGroup",
            "in": "query",
            "description": "Filter employees by salary group",
            "schema": {
              "$ref": "#/components/schemas/SalaryGroup"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter employees by type",
            "schema": {
              "$ref": "#/components/schemas/EmployeeType"
            }
          },
          {
            "name": "office",
            "in": "query",
            "description": "Filter employees by office",
            "schema": {
              "$ref": "#/components/schemas/Office"
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Filter employees by archived status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "first",
            "in": "query",
            "description": "First result.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "Max results.",
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of employees",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Employee"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Invalid request was sent to the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createEmployee",
        "summary": "Create Employee.",
        "description": "Creates Employee. All new users created via this endpoint should be given the employee realm role.",
        "security": [
          {
            "BearerAuth": [
              "manager"
            ]
          }
        ],
        "tags": [
          "Employees",
          "SpecManagementUI"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created employee",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            }
          },
          "default": {
            "description": "Invalid request was sent to the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}": {
      "get": {
        "operationId": "findEmployee",
        "summary": "Find an employee.",
        "description": "Finds an employee by ID.",
        "security": [
          {
            "BearerAuth": [
              "manager"
            ]
          }
        ],
        "tags": [
          "Employees",
          "SpecManagementUI"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "description": "employee's ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found employee",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            }
          },
          "default": {
            "description": "Invalid request was sent to the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateEmployee",
        "summary": "Update Employee.",
        "description": "Updates Employee.",
        "security": [
          {
            "BearerAuth": [
              "manager"
            ]
          }
        ],
        "tags": [
          "Employees",
          "SpecManagementUI"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "description": "employee's ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated employee",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            }
          },
          "default": {
            "description": "Invalid request was sent to the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteEmployee",
        "summary": "Delete Employee.",
        "description": "Deletes Employee.\nThis should only be allowed to be used in tests. In production usage the employee should be archived instead.\n",
        "security": [
          {
            "BearerAuth": [
              "manager"
            ]
          }
        ],
        "tags": [
          "Employees",
          "SpecManagementUI"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "description": "employee's ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response indicating successful removal"
          },
          "default": {
            "description": "Invalid request was sent to the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/workEvents": {
      "get": {
        "operationId": "listEmployeeWorkEvents",
        "summary": "List Employees Time Entries.",
        "description": "Lists Employees Work Events. Sort by time, latest first.",
        "security": [
          {
            "BearerAuth": [
              "manager",
              "driver",
              "employee"
            ]
          }
        ],
        "tags": [
          "WorkEvents",
          "SpecApp",
          "SpecManagementUI"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "description": "employee's ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Filter work events after specified date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Filter work events before specified date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "first",
            "in": "query",
            "description": "First result.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "Max results.",
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of work events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkEvent"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Invalid request was sent to the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createEmployeeWorkEvent",
        "summary": "Create Employees Work Event.",
        "description": "Creates Employees Work Event.",
        "security": [
          {
            "BearerAuth": [
              "manager",
              "driver",
              "employee"
            ]
          }
        ],
        "tags": [
          "WorkEvents",
          "SpecApp",
          "SpecManagementUI"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "description": "employee's ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkEvent"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created work event",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkEvent"
                }
              }
            }
          },
          "default": {
            "description": "Invalid request was sent to the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/workEvents/{workEventId}": {
      "get": {
        "operationId": "findEmployeeWorkEvent",
        "summary": "Find an employee's work event.",
        "description": "Finds an employee's work event by ID.",
        "security": [
          {
            "BearerAuth": [
              "manager",
              "driver",
              "employee"
            ]
          }
        ],
        "tags": [
          "WorkEvents",
          "SpecApp",
          "SpecManagementUI"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "description": "employee's ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workEventId",
            "required": true,
            "in": "path",
            "description": "work event's ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found work event",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkEvent"
                }
              }
            }
          },
          "default": {
            "description": "Invalid request was sent to the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateEmployeeWorkEvent",
        "summary": "Update Employee's Work Event.",
        "description": "Updates Employee's Work Event.",
        "security": [
          {
            "BearerAuth": [
              "manager",
              "employee"
            ]
          }
        ],
        "tags": [
          "WorkEvents",
          "SpecApp",
          "SpecManagementUI"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "description": "employee's ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workEventId",
            "required": true,
            "in": "path",
            "description": "work event's ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated time entry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkEvent"
                }
              }
            }
          },
          "default": {
            "description": "Invalid request was sent to the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteEmployeeWorkEvent",
        "summary": "Delete Employee's Work Event.",
        "description": "Deletes Employee's Work Event. Only accessible by managers.",
        "security": [
          {
            "BearerAuth": [
              "manager"
            ]
          }
        ],
        "tags": [
          "WorkEvents",
          "SpecManagementUI"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "description": "employee's ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workEventId",
            "required": true,
            "in": "path",
            "description": "work event's ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the time entry"
          },
          "default": {
            "description": "Invalid request was sent to the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/dailyTimeEntries": {
      "get": {
        "operationId": "listEmployeeDailyTimeEntries",
        "summary": "List Employees Daily Time Entries.",
        "description": "Lists Employees Daily Time Entries. There can be 0-1 daily time entries per work type per day.",
        "security": [
          {
            "BearerAuth": [
              "manager"
            ]
          }
        ],
        "tags": [
          "DailyTimeEntries",
          "SpecManagementUI"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "description": "employee's ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workEventType",
            "in": "query",
            "description": "List daily time entries only for specified work type.",
            "schema": {
              "$ref": "#/components/schemas/WorkEventType"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "List daily time entries only after specified date.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "List daily time entries only before specified date.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "first",
            "in": "query",
            "description": "First result.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "Max results.",
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of daily time entries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DailyTimeEntry"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Invalid request was sent to the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createEmployeeDailyTimeEntry",
        "summary": "Create Employees Daily Time Entry.",
        "description": "Creates Employees Daily Time Entry.\n\nAttempt to create new daily time entry should fail if a daily entry with the same date and work type already exists.\n",
        "security": [
          {
            "BearerAuth": [
              "manager"
            ]
          }
        ],
        "tags": [
          "DailyTimeEntries",
          "SpecManagementUI"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "description": "employee's ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DailyTimeEntry"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created daily time entry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkEvent"
                }
              }
            }
          },
          "default": {
            "description": "Invalid request was sent to the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/employees/{employeeId}/dailyTimeEntries/{dailyTimeEntryId}": {
      "get": {
        "operationId": "findEmployeeDailyTimeEntry",
        "summary": "Find an employee's daily time entry.",
        "description": "Finds an employee's daily time entry by ID.",
        "security": [
          {
            "BearerAuth": [
              "manager"
            ]
          }
        ],
        "tags": [
          "DailyTimeEntries",
          "SpecManagementUI"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "description": "employee's ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "dailyTimeEntryId",
            "required": true,
            "in": "path",
            "description": "daily time entry's ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found daily time entry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DailyTimeEntry"
                }
              }
            }
          },
          "default": {
            "description": "Invalid request was sent to the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateEmployeeDailyTimeEntry",
        "summary": "Update Employee's Daily Time Entry.",
        "description": "Updates Employee's Daily Time Entry.\n\nTrying to update other than total hours from an entry should fail, as that could potentially\nclash with another entry. Instead, incorrect entry should be deleted and new one created.\n",
        "security": [
          {
            "BearerAuth": [
              "manager"
            ]
          }
        ],
        "tags": [
          "DailyTimeEntries",
          "SpecManagementUI"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "description": "employee's ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "dailyTimeEntryId",
            "required": true,
            "in": "path",
            "description": "daily time entry's ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DailyTimeEntry"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated daily time entry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DailyTimeEntry"
                }
              }
            }
          },
          "default": {
            "description": "Invalid request was sent to the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteEmployeeDailyTimeEntry",
        "summary": "Delete Employee's Daily Time Entry.",
        "description": "Deletes Employee's Daily Time Entry.",
        "security": [
          {
            "BearerAuth": [
              "manager"
            ]
          }
        ],
        "tags": [
          "DailyTimeEntries",
          "SpecManagementUI"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "description": "employee's ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "dailyTimeEntryId",
            "required": true,
            "in": "path",
            "description": "daily time entry's ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the daily time entry"
          },
          "default": {
            "description": "Invalid request was sent to the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/holidays": {
      "get": {
        "operationId": "listHolidays",
        "summary": "List Holidays.",
        "description": "Lists holidays.",
        "security": [
          {
            "BearerAuth": [
              "manager"
            ]
          }
        ],
        "tags": [
          "Holidays",
          "SpecManagementUI"
        ],
        "parameters": [
          {
            "name": "year",
            "in": "query",
            "description": "What years holidays to list.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "first",
            "in": "query",
            "description": "First result.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "Max results.",
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of holidays",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Holiday"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Invalid request was sent to the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createHoliday",
        "summary": "Create Holiday.",
        "description": "Creates Holiday.",
        "security": [
          {
            "BearerAuth": [
              "manager"
            ]
          }
        ],
        "tags": [
          "Holidays",
          "SpecManagementUI"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Holiday"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created Holiday",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Holiday"
                }
              }
            }
          },
          "default": {
            "description": "Invalid request was sent to the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/holidays/{holidayId}": {
      "get": {
        "operationId": "findHoliday",
        "summary": "Find an Holiday.",
        "description": "Finds an Holiday by ID.",
        "security": [
          {
            "BearerAuth": [
              "manager"
            ]
          }
        ],
        "tags": [
          "Holidays",
          "SpecManagementUI"
        ],
        "parameters": [
          {
            "name": "holidayId",
            "required": true,
            "in": "path",
            "description": "Holiday's ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found Holiday",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Holiday"
                }
              }
            }
          },
          "default": {
            "description": "Invalid request was sent to the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateHoliday",
        "summary": "Update Holiday.",
        "description": "Updates Holiday.",
        "security": [
          {
            "BearerAuth": [
              "manager"
            ]
          }
        ],
        "tags": [
          "Holidays",
          "SpecManagementUI"
        ],
        "parameters": [
          {
            "name": "holidayId",
            "required": true,
            "in": "path",
            "description": "Holidays's ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Holiday"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated Holiday",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Holiday"
                }
              }
            }
          },
          "default": {
            "description": "Invalid request was sent to the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteHoliday",
        "summary": "Delete Holiday.",
        "description": "Deletes Holiday.",
        "security": [
          {
            "BearerAuth": [
              "manager"
            ]
          }
        ],
        "tags": [
          "Holidays",
          "SpecManagementUI"
        ],
        "parameters": [
          {
            "name": "holidayId",
            "required": true,
            "in": "path",
            "description": "Holiday's ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response indicating successful removal"
          },
          "default": {
            "description": "Invalid request was sent to the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key"
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "description": "Error object",
        "required": [
          "status",
          "message"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Driver": {
        "type": "object",
        "description": "Represents single truck driver",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "displayName": {
            "type": "string",
            "description": "Driver display name"
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Setting the archivedAt time marks the driver as archived. Drivers marked as archived will not appear in list requests unless archived filter is set to true. Archived driver cannot be updated, unless archivedAt is first set to null.\n"
          }
        }
      },
      "Employee": {
        "type": "object",
        "description": "Represents single employee",
        "required": [
          "firstName",
          "lastName",
          "type",
          "salaryGroup",
          "office",
          "employeeNumber"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "firstName": {
            "type": "string",
            "description": "Employee's first name"
          },
          "lastName": {
            "type": "string",
            "description": "Employee's last name"
          },
          "driverCardId": {
            "type": "string",
            "description": "Employee's driver card ID."
          },
          "type": {
            "$ref": "#/components/schemas/EmployeeType"
          },
          "salaryGroup": {
            "$ref": "#/components/schemas/SalaryGroup"
          },
          "office": {
            "$ref": "#/components/schemas/Office"
          },
          "regularWorkingHours": {
            "type": "number",
            "format": "float",
            "description": "Employee's regular working hours per two weeks. Used for employee's whose salary group is either Driver or VPLogistics.\n"
          },
          "driverCardLastReadOut": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the driver card was read out. In the beginning this should be set manually but later probably automated.\n"
          },
          "employeeNumber": {
            "type": "string",
            "description": "Employee's number. Should be unique."
          },
          "email": {
            "type": "string",
            "description": "Employee's email address"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Employee's phone number"
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Setting the archivedAt time marks the employee as archived. Employees marked as archived will not appear in list requests unless archived filter is set to true. Archived employee cannot be updated, unless archivedAt is first set to null.\n"
          }
        }
      },
      "EmployeeType": {
        "type": "string",
        "description": "Employee's type described as finnish abbreviation. UI implementations should translate these to more human readable form.\nPakettiautonkuljettaja (PA)\nKuorma-auton kuljettaja (KA)\nAlihankkija (AH)\nVuokratyöntekijä (VK)\nTyöharjoittelija (TH)\nTilapäistyöntekijä (TP)\nAjojärjestelijä (AJ)\nEsimies (JH)\nAikatuntipalkka (AP)\nKuukausipalkka (KK)\nEi-aktiivinen (POIS)\nTäysperäkuljettaja (TPK)\n",
        "enum": [
          "PA",
          "KA",
          "AH",
          "VK",
          "TH",
          "TP",
          "AJ",
          "JH",
          "AP",
          "KK",
          "POIS",
          "TPK"
        ]
      },
      "SalaryGroup": {
        "type": "string",
        "description": "Employee's salary group\nKuljettaja (Driver) - Should be default IF the employees office is not KOTKA\nVP-Logistics (VPlogistics)\nOffice\nTerminal\n",
        "enum": [
          "DRIVER",
          "VPLOGISTICS",
          "OFFICE",
          "TERMINAL"
        ]
      },
      "Office": {
        "type": "string",
        "description": "Employee's office. Salary group should be set to VPLogistics if the office is KOTKA",
        "enum": [
          "KOTKA",
          "KOUVOLA",
          "RAUHA"
        ]
      },
      "WorkEvent": {
        "type": "object",
        "description": "Represents single work event",
        "required": [
          "employeeId",
          "time",
          "workEventType"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "employeeId": {
            "type": "string",
            "format": "uuid",
            "description": "Employee's ID"
          },
          "time": {
            "type": "string",
            "format": "date-time",
            "description": "Work event time"
          },
          "workEventType": {
            "$ref": "#/components/schemas/WorkEventType"
          }
        }
      },
      "DailyTimeEntry": {
        "type": "object",
        "description": "Represents a single daily time entry. Daily time entries are created when total working hours\nof an employee for some work type needs to be manually changed for a specific day. Only a single\ndaily time entry per work type per day is allowed. If one already exists, it should be updated.\nDaily time entry is always prioritized over calculating the total from the actual time entries\nwhen displaying the aggregated hours and sending the data to payroll.\n",
        "required": [
          "employeeId",
          "date",
          "workEventType",
          "hours",
          "approved"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "employeeId": {
            "type": "string",
            "format": "uuid",
            "description": "Employee's ID"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Daily time entry date"
          },
          "workEventType": {
            "$ref": "#/components/schemas/WorkEventType"
          },
          "hours": {
            "type": "number",
            "format": "float",
            "description": "Corrected hours for the day for corresponding work type."
          },
          "approved": {
            "type": "boolean",
            "description": "Whether the daily time entry has been approved by a supervisor.\nHours cannot be updated unless approved is set to false.\n"
          }
        }
      },
      "WorkEventType": {
        "type": "string",
        "description": "Work event types. UI implementations should translate these to more human readable form.\n\n*Office/Terminal work types*\n- VEGETABLE (Hevi)\n- DRY (Kuiva)\n- MEAT_CELLAR (Lihakellari)\n- MEIRA (Meira)\n- FROZEN (Pakaste)\n- PALTE (Palte)\n- BREWERY (Panimo)\n- GREASE (Rasva)\n- LOGIN\n- LOGOUT\n\n*Common work types*\n- OTHER_WORK (Muu työ)\n- BREAK (Tauko)\n- SHIFT_START\n- SHIFT_END\n\n*Driver work types*\n- DRIVE\n- LOADING\n- UNLOADING\n- AVAILABILITY\n- DRIVER_CARD_INSERTED\n- DRIVER_CARD_REMOVED\n",
        "enum": [
          "VEGETABLE",
          "DRY",
          "MEAT_CELLAR",
          "MEIRA",
          "FROZEN",
          "PALTE",
          "BREWERY",
          "GREASE",
          "LOGIN",
          "LOGOUT",
          "OTHER_WORK",
          "BREAK",
          "SHIFT_START",
          "SHIFT_END",
          "DRIVE",
          "LOADING",
          "UNLOADING",
          "AVAILABILITY",
          "DRIVER_CARD_INSERTED",
          "DRIVER_CARD_REMOVED"
        ]
      },
      "Holiday": {
        "type": "object",
        "description": "Represents a single holiday",
        "required": [
          "date",
          "name",
          "compensationType"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Holiday date"
          },
          "name": {
            "type": "string",
            "description": "Holiday name"
          },
          "compensationType": {
            "$ref": "#/components/schemas/CompensationType"
          },
          "creatorId": {
            "type": "string",
            "format": "uuid",
            "description": "Creator's ID"
          },
          "lastModifierId": {
            "type": "string",
            "format": "uuid",
            "description": "Last modifier's ID"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation time"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last modified time"
          }
        }
      },
      "CompensationType": {
        "type": "string",
        "enum": [
          "PUBLIC_HOLIDAY_ALLOWANCE",
          "DAY_OFF_WORK_ALLOWANCE"
        ]
      }
    }
  }
}
openapi: 3.0.3
info:
  title: Vehicle Management Services (full)
  description: Vehicle Management Services (full)
  version: 1.0.0
security:
  - DriverAppApiKeyAuth: []
  - DataReceiverApiKeyAuth: []
  - KeycloakApiKeyAuth: []
  - CronKeyAuth: []
  - BearerAuth:
      - driver
      - manager
      - integrations
paths:
  /vehicle-management/v1/publicTrucks:
    get:
      operationId: listPublicTrucks
      summary: List PublicTrucks.
      description: Lists public info about each truck.
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - PublicTrucks
      parameters:
        - name: vin
          in: query
          description: Filter results by vin
          schema:
            type: string
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of trucks with only public info
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PublicTruck"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vehicle-management/v1/trucks:
    get:
      operationId: listTrucks
      summary: List Trucks.
      description: Lists Trucks.
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - Trucks
      parameters:
        - name: plateNumber
          in: query
          description: Filter results by plate number
          schema:
            type: string
        - name: archived
          in: query
          description: Filter results by archived status
          schema:
            type: boolean
        - name: sortBy
          in: query
          description: Sort results by field
          schema:
            $ref: "#/components/schemas/TruckSortByField"
        - name: sortDirection
          in: query
          description: Sort direction
          schema:
            $ref: "#/components/schemas/SortOrder"
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of trucks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Truck"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createTruck
      summary: Create truck
      description: Create new truck
      security:
        - BearerAuth:
            - manager
      tags:
        - Trucks
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Truck"
        description: Payload
        required: true
      responses:
        "200":
          description: Created truck
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Truck"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vehicle-management/v1/trucks/{truckId}:
    get:
      operationId: findTruck
      summary: Find a truck.
      description: Finds a truck by id.
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - Trucks
      parameters:
        - name: truckId
          required: true
          in: path
          description: trucks id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found truck
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Truck"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateTruck
      summary: Updates trucks
      description: Updates single truck
      security:
        - BearerAuth:
            - manager
      tags:
        - Trucks
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Truck"
        description: Payload
        required: true
      parameters:
        - name: truckId
          required: true
          in: path
          description: truck id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Updated truck
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Truck"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vehicle-management/v1/trucks/{truckId}/driverCards:
    get:
      operationId: listTruckDriverCards
      summary: Lists truck driver cards
      description: Lists truck driver cards. Used to check if a truck has a driver
        card inserted.
      security:
        - BearerAuth:
            - driver
        - KeycloakApiKeyAuth: []
      tags:
        - Trucks
      parameters:
        - name: truckId
          required: true
          in: path
          description: truck ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of truck driver cards. Contains either 0 or 1 cards.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TruckDriverCard"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createTruckDriverCard
      summary: Create truck driver card
      description: >
        Create new truck driver card.


        If a card with same truck ID and card ID is already found with removedAt set, the existing card is restored.

        If a card with different truck ID and card ID is already found with removedAt set, the previous card is

        immediately deleted and the new card is created. If a card with the same truck ID and card ID is found with

        removedAt not set, the request is rejected with a 409 Conflict response.
      security:
        - DataReceiverApiKeyAuth: []
      tags:
        - Trucks
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TruckDriverCard"
        description: Payload
        required: true
      parameters:
        - name: truckId
          required: true
          in: path
          description: truck ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Created driver card
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TruckDriverCard"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vehicle-management/v1/trucks/{truckId}/driverCards/{driverCardId}:
    delete:
      operationId: deleteTruckDriverCard
      summary: Deletes truck driver card
      description: >
        Deletes single truck driver card. Driver cards are deleted when they are
        removed from the truck.


        The card is first soft-deleted by setting removedAt to value sent in X-Removed-At header. A background process

        then checks frequently for driver cards removed over a configurable grace period ago and deletes them

        permanently. This is done to prevent false positive driver card states coming in from telematics device.
      security:
        - DataReceiverApiKeyAuth: []
      tags:
        - Trucks
      parameters:
        - name: truckId
          required: true
          in: path
          description: truck ID
          schema:
            type: string
            format: uuid
        - name: driverCardId
          required: true
          in: path
          description: driver card ID
          schema:
            type: string
        - name: X-Removed-At
          required: true
          in: header
          description: Timestamp when the driver card was removed from the truck
          schema:
            type: string
            format: date-time
      responses:
        "204":
          description: Empty response indicating successful removal
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vehicle-management/v1/trucks/{truckId}/locations:
    post:
      operationId: createTruckLocation
      summary: Create truck location
      description: Create new truck location. Used by vehicle data receiver to send
        truck location data.
      security:
        - DataReceiverApiKeyAuth: []
      tags:
        - Trucks
      parameters:
        - name: truckId
          required: true
          in: path
          description: truck id
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TruckLocation"
        description: Payload
        required: true
      responses:
        "201":
          description: Received data
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      operationId: listTruckLocations
      summary: List Truck locations
      description: Lists Truck locations.
      security:
        - BearerAuth:
            - manager
      tags:
        - Trucks
      parameters:
        - name: truckId
          required: true
          in: path
          description: truck id
          schema:
            type: string
            format: uuid
        - name: after
          in: query
          description: Filter results after given date-time
          schema:
            type: string
            format: date-time
        - name: before
          in: query
          description: Filter results before given date-time
          schema:
            type: string
            format: date-time
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of truck locations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TruckLocation"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vehicle-management/v1/trucks/{truckId}/speeds:
    post:
      operationId: createTruckSpeed
      summary: Create truck speed
      description: Create new truck speed. Used by vehicle data receiver to send truck
        speed data.
      security:
        - DataReceiverApiKeyAuth: []
      tags:
        - Trucks
      parameters:
        - name: truckId
          required: true
          in: path
          description: truck id
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TruckSpeed"
        description: Payload
        required: true
      responses:
        "201":
          description: Received data
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      operationId: listTruckSpeeds
      summary: List Truck speeds
      description: Lists Truck speeds.
      security:
        - BearerAuth:
            - manager
      tags:
        - Trucks
      parameters:
        - name: truckId
          required: true
          in: path
          description: truck id
          schema:
            type: string
            format: uuid
        - name: after
          in: query
          description: Filter results after given date-time
          schema:
            type: string
            format: date-time
        - name: before
          in: query
          description: Filter results before given date-time
          schema:
            type: string
            format: date-time
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of truck speeds
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TruckSpeed"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vehicle-management/v1/trucks/{truckId}/driveStates:
    get:
      operationId: listDriveStates
      summary: List drive states.
      description: Lists drive states for truck.
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - Trucks
      parameters:
        - name: truckId
          required: true
          in: path
          description: truck id
          schema:
            type: string
            format: uuid
        - name: driverId
          in: query
          description: Filter results by driver ID
          schema:
            type: string
            format: uuid
        - name: state
          in: query
          description: Filter results by driver state
          schema:
            type: array
            items:
              $ref: "#/components/schemas/TruckDriveStateEnum"
        - name: after
          in: query
          description: Filter results after given date-time
          schema:
            type: string
            format: date-time
        - name: before
          in: query
          description: Filter results before given date-time
          schema:
            type: string
            format: date-time
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of drive states
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TruckDriveState"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createDriveState
      summary: Create drive state
      description: Create new drive state for truck
      security:
        - DataReceiverApiKeyAuth: []
      tags:
        - Trucks
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TruckDriveState"
        description: Payload
        required: true
      parameters:
        - name: truckId
          required: true
          in: path
          description: truck id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Created drive state
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vehicle-management/v1/trucks/{truckId}/odometerReadings:
    get:
      operationId: listTruckOdometerReadings
      summary: List truck odometer readings
      description: Lists truck odometer readings.
      security:
        - BearerAuth:
            - manager
      tags:
        - Trucks
      parameters:
        - name: truckId
          required: true
          in: path
          description: truck id
          schema:
            type: string
            format: uuid
        - name: after
          in: query
          description: Filter results after given date-time
          schema:
            type: string
            format: date-time
        - name: before
          in: query
          description: Filter results before given date-time
          schema:
            type: string
            format: date-time
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of truck odometer readings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TruckOdometerReading"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createTruckOdometerReading
      summary: Create truck odometer reading
      description: Create new truck odometer reading. Used by vehicle data receiver to
        send truck odometer reading data.
      security:
        - DataReceiverApiKeyAuth: []
      tags:
        - Trucks
      parameters:
        - name: truckId
          required: true
          in: path
          description: truck id
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TruckOdometerReading"
        description: Payload
        required: true
      responses:
        "201":
          description: Received data
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vehicle-management/v1/trucks/{truckId}/temperatures:
    get:
      operationId: listTruckTemperatures
      summary: List truck temperatures.
      description: Retrieve all temperatures from all thermometers related to a
        specific truck, possibly including data from archived thermometers.
      security:
        - BearerAuth:
            - manager
      tags:
        - Trucks
      parameters:
        - name: truckId
          required: true
          in: path
          description: The unique ID of the truck
          schema:
            type: string
            format: uuid
        - name: includeArchived
          in: query
          description: Include archived thermometers' data in the results
          schema:
            type: boolean
            default: false
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of temperatures, including archived data if requested
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Temperature"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vehicle-management/v1/temperatureReadings:
    post:
      operationId: createTemperatureReading
      summary: Create temperature reading
      description: Create temperature reading
      security:
        - DataReceiverApiKeyAuth: []
      tags:
        - TemperatureReadings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemperatureReading"
        description: Payload
        required: true
      responses:
        "204":
          description: Created temperature reading
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vehicle-management/v1/towables:
    get:
      operationId: listTowables
      summary: List Towables.
      description: Lists Towables.
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - Towables
      parameters:
        - name: plateNumber
          in: query
          description: Filter results by plate number
          schema:
            type: string
        - name: archived
          in: query
          description: Filter results by archived status
          schema:
            type: boolean
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of towables
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Towable"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createTowable
      summary: Create towable
      description: Create new towable
      security:
        - BearerAuth:
            - manager
      tags:
        - Towables
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Towable"
        description: Payload
        required: true
      responses:
        "200":
          description: Created towable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Towable"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vehicle-management/v1/towables/{towableId}:
    get:
      operationId: findTowable
      summary: Find a towable.
      description: Finds a towable by id.
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - Towables
      parameters:
        - name: towableId
          required: true
          in: path
          description: towables id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found towable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Towable"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateTowable
      summary: Updates towables
      description: Updates single towable
      security:
        - BearerAuth:
            - manager
      tags:
        - Towables
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Towable"
        description: Payload
        required: true
      parameters:
        - name: towableId
          required: true
          in: path
          description: towable id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Updated towable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Towable"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vehicle-management/v1/towables/{towableId}/temperatures:
    get:
      operationId: listTowableTemperatures
      summary: List temperature readings by towable, including archived thermometers
      description: Retrieve all temperatures from all thermometers related to a
        specific towable, possibly including data from thermometers that have
        been archived.
      security:
        - BearerAuth:
            - manager
      tags:
        - Towables
      parameters:
        - name: towableId
          required: true
          in: path
          description: The unique ID of the towable
          schema:
            type: string
            format: uuid
        - name: includeArchived
          in: query
          description: Include archived thermometers' data in the results
          schema:
            type: boolean
            default: false
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of temperature readings, including archived data if requested
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Temperature"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vehicle-management/v1/vehicles:
    get:
      operationId: listVehicles
      summary: List Vehicles.
      description: Lists Vehicles.
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - Vehicles
      parameters:
        - name: truckId
          in: query
          description: Filter results by truck id
          schema:
            type: string
            format: uuid
        - name: archived
          in: query
          description: Filter results by archived status
          schema:
            type: boolean
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of vehicles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Vehicle"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createVehicle
      summary: Create vehicle
      description: >
        Create new vehicle. Vehicles are the history of the combinations of
        towables behind a truck. When a vehicle structure needs to be updated, a
        new vehicle with updated structure should be created. This updates the
        active vehicle for the truck and archives the previous one.
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - Vehicles
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Vehicle"
        description: Payload
        required: true
      responses:
        "200":
          description: Created vehicle
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vehicle"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vehicle-management/v1/vehicles/{vehicleId}:
    get:
      operationId: findVehicle
      summary: Find a vehicle.
      description: Finds a vehicle by id.
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - Vehicles
      parameters:
        - name: vehicleId
          required: true
          in: path
          description: vehicles id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found vehicle
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vehicle"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vehicle-management/v1/thermometers:
    get:
      operationId: listThermometers
      summary: List thermometers
      description: Retrieve a list of all thermometers, optionally filtered by vehicle
        association or archived status
      security:
        - BearerAuth:
            - manager
      tags:
        - Trucks
      parameters:
        - name: entityId
          in: query
          description: Filter thermometers by associated truck or towable ID. Should be
            used with entityType filter.
          schema:
            type: string
            format: uuid
        - name: entityType
          in: query
          description: Filter thermometers by associated entity type (e.g., "truck",
            "towable")
          schema:
            type: string
            enum:
              - truck
              - towable
        - name: includeArchived
          in: query
          description: Include archived thermometers in the results
          schema:
            type: boolean
            default: false
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of thermometers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Thermometer"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vehicle-management/v1/thermometers/{thermometerId}:
    get:
      operationId: findThermometer
      summary: Find a thermometer by ID
      description: Retrieve the details of a specific thermometer
      security:
        - BearerAuth:
            - manager
      tags:
        - Trucks
      parameters:
        - name: thermometerId
          required: true
          in: path
          description: The unique ID of the thermometer
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found thermometer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Thermometer"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateThermometer
      summary: Update thermometer
      description: Update the details of a specific thermometer. Currently only the
        name can be updated.
      security:
        - BearerAuth:
            - manager
      tags:
        - Trucks
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
        description: Payload
        required: true
      parameters:
        - name: thermometerId
          required: true
          in: path
          description: The unique ID of the thermometer
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Updated thermometer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Thermometer"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /work-planning/v1/routes:
    get:
      operationId: listRoutes
      summary: List Routes.
      description: Lists Routes.
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - Routes
      parameters:
        - name: truckId
          in: query
          description: Filter results by truck id
          schema:
            type: string
            format: uuid
        - name: driverId
          in: query
          description: Filter results by driver id
          schema:
            type: string
            format: uuid
        - name: departureAfter
          in: query
          description: Filter results by departure time same or after this time
          schema:
            type: string
            format: date-time
        - name: departureBefore
          in: query
          description: Filter results by departure time before this time
          schema:
            type: string
            format: date-time
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of routes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Route"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createRoute
      summary: Create route
      description: Create new route
      security:
        - BearerAuth:
            - manager
      tags:
        - Routes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Route"
        description: Payload
        required: true
      responses:
        "200":
          description: Created route
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Route"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /work-planning/v1/routes/{routeId}:
    get:
      operationId: findRoute
      summary: Find a route.
      description: Finds a route by id.
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - Routes
      parameters:
        - name: routeId
          required: true
          in: path
          description: routes id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found route
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Route"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateRoute
      summary: Updates routes
      description: Updates single route
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - Routes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Route"
        description: Payload
        required: true
      parameters:
        - name: routeId
          required: true
          in: path
          description: route id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Updated route
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Route"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteRoute
      summary: Deletes route
      description: Deletes route
      security:
        - BearerAuth:
            - manager
      tags:
        - Routes
      parameters:
        - name: routeId
          required: true
          in: path
          description: route id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty response indicating successful removal
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user-management/v1/drivers:
    get:
      operationId: listDrivers
      summary: List Drivers.
      description: Lists Drivers.
      security:
        - BearerAuth:
            - manager
            - integrations
      tags:
        - Drivers
      parameters:
        - name: driverCardId
          in: query
          description: Filter drivers by driver card ID. Will return 0 to 1 drivers.
          schema:
            type: string
        - name: archived
          in: query
          description: Filter drivers by archived status
          schema:
            type: boolean
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of routes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Driver"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user-management/v1/drivers/{driverId}:
    get:
      operationId: findDriver
      summary: Find a driver.
      description: Finds a driver by ID.
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - Drivers
      parameters:
        - name: driverId
          required: true
          in: path
          description: driver's ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found driver
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Driver"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user-management/v1/employees:
    get:
      operationId: listEmployees
      summary: List Employees.
      description: Lists Employees. A user is considered an employee if they're given
        the employee realm role.
      security:
        - BearerAuth:
            - manager
      tags:
        - Employees
      parameters:
        - name: search
          in: query
          description: Search string. Should search from first and last names.
          schema:
            type: string
        - name: salaryGroup
          in: query
          description: Filter employees by salary group
          schema:
            $ref: "#/components/schemas/SalaryGroup"
        - name: type
          in: query
          description: Filter employees by type
          schema:
            $ref: "#/components/schemas/EmployeeType"
        - name: office
          in: query
          description: Filter employees by office
          schema:
            $ref: "#/components/schemas/Office"
        - name: archived
          in: query
          description: Filter employees by archived status
          schema:
            type: boolean
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
            default: 0
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: List of employees
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Employee"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createEmployee
      summary: Create Employee.
      description: Creates Employee. All new users created via this endpoint should be
        given the employee realm role.
      security:
        - BearerAuth:
            - manager
      tags:
        - Employees
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Employee"
      responses:
        "201":
          description: Created employee
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user-management/v1/employees/{employeeId}:
    get:
      operationId: findEmployee
      summary: Find an employee.
      description: Finds an employee by ID.
      security:
        - BearerAuth:
            - manager
      tags:
        - Employees
      parameters:
        - name: employeeId
          required: true
          in: path
          description: employee's ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found employee
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateEmployee
      summary: Update Employee.
      description: Updates Employee.
      security:
        - BearerAuth:
            - manager
      tags:
        - Employees
      parameters:
        - name: employeeId
          required: true
          in: path
          description: employee's ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Employee"
      responses:
        "200":
          description: Updated employee
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteEmployee
      summary: Delete Employee.
      description: >
        Deletes Employee.

        This should only be allowed to be used in tests. In production usage the employee should be archived instead.
      security:
        - BearerAuth:
            - manager
      tags:
        - Employees
      parameters:
        - name: employeeId
          required: true
          in: path
          description: employee's ID
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty response indicating successful removal
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user-management/v1/employees/{employeeId}/workShifts:
    get:
      operationId: listEmployeeWorkShifts
      summary: List Employees Work Shifts.
      description: >
        Lists Employees work Shifts. Sort by time, latest first.


        Employees can only see their own work shifts. Managers can see all employees' work shifts.
      security:
        - BearerAuth:
            - manager
            - employee
      tags:
        - EmployeeWorkShifts
      parameters:
        - name: employeeId
          required: true
          in: path
          description: employee's ID
          schema:
            type: string
            format: uuid
        - name: startedAfter
          in: query
          description: Filter work shifts started after specified date.
          schema:
            type: string
            format: date-time
        - name: startedBefore
          in: query
          description: Filter work shifts started before specified date.
          schema:
            type: string
            format: date-time
        - name: dateAfter
          in: query
          description: Filter work shifts which date is after specified date.
          schema:
            type: string
            format: date-time
        - name: dateBefore
          in: query
          description: Filter work shifts date date is before specified date.
          schema:
            type: string
            format: date-time
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
            default: 0
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: List of employee work shifts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EmployeeWorkShift"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createEmployeeWorkShift
      summary: Create Employee Work Shift.
      description: Creates Employee Work Shift.
      security:
        - BearerAuth:
            - manager
      tags:
        - EmployeeWorkShifts
      parameters:
        - name: employeeId
          required: true
          in: path
          description: employee's ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmployeeWorkShift"
      responses:
        "201":
          description: Created employee work shift
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeeWorkShift"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user-management/v1/employees/{employeeId}/workShifts/{workShiftId}:
    get:
      operationId: findEmployeeWorkShift
      summary: Find Employee Work Shift.
      description: Finds an employee's work shift by ID.
      security:
        - BearerAuth:
            - manager
      tags:
        - EmployeeWorkShifts
      parameters:
        - name: employeeId
          required: true
          in: path
          description: employee's ID
          schema:
            type: string
            format: uuid
        - name: workShiftId
          required: true
          in: path
          description: work shift's ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found employee work shift
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeeWorkShift"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateEmployeeWorkShift
      summary: Update Employee Work Shift.
      description: Updates Employee Work Shift. Only approved field can be updated.
      security:
        - BearerAuth:
            - manager
      tags:
        - EmployeeWorkShifts
      parameters:
        - name: employeeId
          required: true
          in: path
          description: employee's ID
          schema:
            type: string
            format: uuid
        - name: workShiftId
          required: true
          in: path
          description: work shift's ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmployeeWorkShift"
      responses:
        "200":
          description: Updated employee work shift
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeeWorkShift"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteEmployeeWorkShift
      summary: Delete employee work shift.
      description: Only for tests.
      security:
        - BearerAuth:
            - manager
      tags:
        - EmployeeWorkShifts
      parameters:
        - name: employeeId
          required: true
          in: path
          description: employee's ID
          schema:
            type: string
            format: uuid
        - name: workShiftId
          required: true
          in: path
          description: work shift's ID
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty response indicating successful removal
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user-management/v1/employees/{employeeId}/workEvents:
    get:
      operationId: listEmployeeWorkEvents
      summary: List Employees Work Events.
      description: Lists Employees Work Events. Sort by time, latest first.
      security:
        - BearerAuth:
            - manager
            - driver
            - employee
      tags:
        - WorkEvents
      parameters:
        - name: employeeId
          required: true
          in: path
          description: employee's ID
          schema:
            type: string
            format: uuid
        - name: employeeWorkShiftId
          in: query
          description: Filter work events by a specific work shift of the employee
          schema:
            type: string
            format: uuid
        - name: after
          in: query
          description: Filter work events after specified date.
          schema:
            type: string
            format: date-time
        - name: before
          in: query
          description: Filter work events before specified date.
          schema:
            type: string
            format: date-time
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
            default: 0
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: List of work events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkEvent"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createEmployeeWorkEvent
      summary: Create Employees Work Event.
      description: >
        Creates Employees Work Event.


        If the work event starts a new shift, a new employee work shift is also created automatically.
      security:
        - BearerAuth:
            - manager
            - driver
            - employee
      tags:
        - WorkEvents
      parameters:
        - name: employeeId
          required: true
          in: path
          description: employee's ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkEvent"
      responses:
        "201":
          description: Created work event
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkEvent"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user-management/v1/employees/{employeeId}/workEvents/{workEventId}:
    get:
      operationId: findEmployeeWorkEvent
      summary: Find an employee's work event.
      description: Finds an employee's work event by ID.
      security:
        - BearerAuth:
            - manager
            - driver
            - employee
      tags:
        - WorkEvents
      parameters:
        - name: employeeId
          required: true
          in: path
          description: employee's ID
          schema:
            type: string
            format: uuid
        - name: workEventId
          required: true
          in: path
          description: work event's ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found work event
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkEvent"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateEmployeeWorkEvent
      summary: Update Employee's Work Event.
      description: Updates Employee's Work Event.
      security:
        - BearerAuth:
            - manager
            - employee
      tags:
        - WorkEvents
      parameters:
        - name: employeeId
          required: true
          in: path
          description: employee's ID
          schema:
            type: string
            format: uuid
        - name: workEventId
          required: true
          in: path
          description: work event's ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkEvent"
      responses:
        "200":
          description: Updated time entry
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkEvent"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteEmployeeWorkEvent
      summary: Delete Employee's Work Event.
      description: >
        Deletes Employee's Work Event. Only accessible by managers. If deleting
        the last remaining work

        event from an employee work shift, the shift and its related work shift hours should also be deleted.
      security:
        - BearerAuth:
            - manager
      tags:
        - WorkEvents
      parameters:
        - name: employeeId
          required: true
          in: path
          description: employee's ID
          schema:
            type: string
            format: uuid
        - name: workEventId
          required: true
          in: path
          description: work event's ID
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Successfully deleted the time entry
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user-management/v1/workShiftHours:
    get:
      operationId: listWorkShiftHours
      summary: List Work Shift Hours.
      description: Lists Work Shift Hours. Unique per employee per work shift per work type.
      security:
        - BearerAuth:
            - manager
      tags:
        - WorkShiftHours
      parameters:
        - name: employeeId
          in: query
          description: filter work shift hours by employee's ID
          schema:
            type: string
            format: uuid
        - name: employeeWorkShiftId
          in: query
          description: >
            filter work shift hours by employee work shift's ID.

            Cannot be used with employeeWorkShiftStartedAfter or employeeWorkShiftStartedBefore.
          schema:
            type: string
            format: uuid
        - name: workType
          in: query
          description: filter work shift hours by work type
          schema:
            $ref: "#/components/schemas/WorkType"
        - name: employeeWorkShiftStartedAfter
          in: query
          description: filter work shift hours by employee work shift started after
            specified date
          schema:
            type: string
            format: date-time
        - name: employeeWorkShiftStartedBefore
          in: query
          description: filter work shift hours by employee work shift started before
            specified date
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: List of work shift hours
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkShiftHours"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user-management/v1/workShiftHours/{workShiftHoursId}:
    get:
      operationId: findWorkShiftHours
      summary: Find Work Shift Hours.
      description: Finds Work Shift Hours.
      security:
        - BearerAuth:
            - manager
      tags:
        - WorkShiftHours
      parameters:
        - name: workShiftHoursId
          required: true
          in: path
          description: ID of work shift hours
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Work shift hours
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkShiftHours"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateWorkShiftHours
      summary: Update Work Shift Hours.
      description: >
        Updates Work Shift Hours.


        Trying to update employeeId, employeeWorkShiftId, or workType from work shift hours should fail.

        If the related employee work shift is approved, work shift hours cannot be updated.
      security:
        - BearerAuth:
            - manager
      tags:
        - WorkShiftHours
      parameters:
        - name: workShiftHoursId
          required: true
          in: path
          description: ID of work shift hours
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkShiftHours"
      responses:
        "200":
          description: Updated work shift hours
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkShiftHours"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteWorkShiftHours
      summary: Delete work shift hours.
      description: Only for tests.
      security:
        - BearerAuth:
            - manager
      tags:
        - WorkShiftHours
      parameters:
        - name: workShiftHoursId
          required: true
          in: path
          description: ID of work shift hours
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty response indicating successful removal
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user-management/v1/holidays:
    get:
      operationId: listHolidays
      summary: List Holidays.
      description: Lists holidays.
      security:
        - BearerAuth:
            - manager
      tags:
        - Holidays
      parameters:
        - name: year
          in: query
          description: What years holidays to list.
          schema:
            type: integer
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
            default: 0
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: List of holidays
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Holiday"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createHoliday
      summary: Create Holiday.
      description: Creates Holiday.
      security:
        - BearerAuth:
            - manager
      tags:
        - Holidays
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Holiday"
      responses:
        "201":
          description: Created Holiday
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Holiday"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user-management/v1/holidays/{holidayId}:
    get:
      operationId: findHoliday
      summary: Find an Holiday.
      description: Finds an Holiday by ID.
      security:
        - BearerAuth:
            - manager
      tags:
        - Holidays
      parameters:
        - name: holidayId
          required: true
          in: path
          description: Holiday's ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found Holiday
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Holiday"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateHoliday
      summary: Update Holiday.
      description: Updates Holiday.
      security:
        - BearerAuth:
            - manager
      tags:
        - Holidays
      parameters:
        - name: holidayId
          required: true
          in: path
          description: Holidays's ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Holiday"
      responses:
        "200":
          description: Updated Holiday
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Holiday"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteHoliday
      summary: Delete Holiday.
      description: Deletes Holiday.
      security:
        - BearerAuth:
            - manager
      tags:
        - Holidays
      parameters:
        - name: holidayId
          required: true
          in: path
          description: Holiday's ID
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty response indicating successful removal
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user-management/v1/clientApps:
    get:
      operationId: listClientApps
      summary: List client apps.
      description: Lists client apps.
      security:
        - BearerAuth:
            - manager
      tags:
        - ClientApps
      parameters:
        - name: status
          in: query
          description: Filter client apps by status
          schema:
            $ref: "#/components/schemas/ClientAppStatus"
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
            default: 0
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: List of client apps
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ClientApp"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createClientApp
      summary: Create a client app.
      description: >
        Creates a client app.


        Client app can only be created in the status 'WAITING_FOR_APPROVAL'. If the client app with the same deviceId

        already exists with status other than 'WAITING_FOR_APPROVAL', the creation fails with conflict. Otherwise,

        the existing client app is returned with OK response.
      security:
        - DriverAppApiKeyAuth: []
      tags:
        - ClientApps
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientApp"
      responses:
        "200":
          description: Already existing client app with the same deviceId and status
            'WAITING_FOR_APPROVAL'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientApp"
        "201":
          description: Created client app
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientApp"
        "409":
          description: >
            Conflict. Client app with the same deviceId already exists with
            status other than 'WAITING_FOR_APPROVAL'.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user-management/v1/clientApps/{clientAppId}:
    get:
      operationId: findClientApp
      summary: Find a client app.
      description: Finds a client app by ID.
      security:
        - BearerAuth:
            - manager
      tags:
        - ClientApps
      parameters:
        - name: clientAppId
          required: true
          in: path
          description: client app's ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found client app
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientApp"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateClientApp
      summary: Update a client app.
      description: Updates a client app.
      security:
        - BearerAuth:
            - manager
      tags:
        - ClientApps
      parameters:
        - name: clientAppId
          required: true
          in: path
          description: Client app's ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientApp"
      responses:
        "200":
          description: Updated client app
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientApp"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteClientApp
      summary: Delete client app.
      description: Deletes client app.
      security:
        - BearerAuth:
            - manager
      tags:
        - ClientApps
      parameters:
        - name: clientAppId
          required: true
          in: path
          description: Client app's ID
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty response indicating successful removal
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user-management/v1/verifyClientApp:
    post:
      operationId: verifyClientApp
      summary: Verifies that the client app has been approved.
      description: Verifies that the client app has been approved.
      security:
        - KeycloakApiKeyAuth: []
      tags:
        - ClientApps
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyClientAppRequest"
      responses:
        "200":
          description: Whether client app is approved or not
          content:
            application/json:
              schema:
                type: boolean
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user-management/v1/payrollExports:
    get:
      operationId: listPayrollExports
      summary: List Payroll Exports.
      description: Lists payroll exports.
      security:
        - BearerAuth:
            - manager
      tags:
        - PayrollExports
      parameters:
        - name: employeeId
          in: query
          description: Filter payroll exports by employee's ID
          schema:
            type: string
            format: uuid
        - name: exportedAfter
          in: query
          description: Filter payroll exports exported after specified date.
          schema:
            type: string
            format: date-time
        - name: exportedBefore
          in: query
          description: Filter payroll exports exported before specified date.
          schema:
            type: string
            format: date-time
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
            default: 0
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: List of payroll exports
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PayrollExport"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createPayrollExport
      summary: Create Payroll Export.
      description: >
        Creates Payroll Export.


        When payroll export is created, its ID is added to all included work shifts.


        The payroll export can only be created if the work shifts included

        - are approved

        - are not included in another payroll export

        - are for the same employee as the payroll export
      security:
        - BearerAuth:
            - manager
      tags:
        - PayrollExports
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PayrollExport"
      responses:
        "201":
          description: Created Payroll Export
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PayrollExport"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user-management/v1/payrollExports/{payrollExportId}:
    get:
      operationId: findPayrollExport
      summary: Find Payroll Export.
      description: Finds Payroll Export by ID.
      security:
        - BearerAuth:
            - manager
      tags:
        - PayrollExports
      parameters:
        - name: payrollExportId
          required: true
          in: path
          description: Payroll export's ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found Payroll Export
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PayrollExport"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /delivery-info/v1/sites:
    get:
      operationId: listSites
      summary: List Sites.
      description: Lists Sites.
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - Sites
      parameters:
        - name: archived
          in: query
          description: Filter sites by archived status
          schema:
            type: boolean
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of sites
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Site"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createSite
      summary: Create site
      description: Create new site
      security:
        - BearerAuth:
            - manager
      tags:
        - Sites
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Site"
        description: Payload
        required: true
      responses:
        "200":
          description: Created site
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Site"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /delivery-info/v1/sites/{siteId}:
    get:
      operationId: findSite
      summary: Find a site.
      description: Finds a site by id.
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - Sites
      parameters:
        - name: siteId
          required: true
          in: path
          description: site id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found site
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Site"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateSite
      summary: Updates site
      description: Updates single site
      security:
        - BearerAuth:
            - manager
      tags:
        - Sites
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Site"
        description: Payload
        required: true
      parameters:
        - name: siteId
          required: true
          in: path
          description: site id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Updated site
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Site"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /delivery-info/v1/tasks:
    get:
      operationId: listTasks
      summary: List Tasks.
      description: Lists Tasks.
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - Tasks
      parameters:
        - name: routeId
          in: query
          description: Route id
          schema:
            type: string
            format: uuid
        - name: assignedToRoute
          in: query
          description: Has been assigned to a route. Should not be used together with
            routeId.
          schema:
            type: boolean
        - name: freightId
          in: query
          description: Freight id
          schema:
            type: string
            format: uuid
        - name: customerSiteId
          in: query
          description: Customer site id
          schema:
            type: string
            format: uuid
        - name: type
          in: query
          description: Task type
          schema:
            $ref: "#/components/schemas/TaskType"
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createTask
      summary: Create task
      description: Create new task
      security:
        - BearerAuth:
            - manager
      tags:
        - Tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
        description: Payload
        required: true
      responses:
        "200":
          description: Created task
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /delivery-info/v1/tasks/{taskId}:
    get:
      operationId: findTask
      summary: Find a task.
      description: Finds a task by id.
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - Tasks
      parameters:
        - name: taskId
          required: true
          in: path
          description: task id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found task
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateTask
      summary: Updates task
      description: Updates single task
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - Tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
        description: Payload
        required: true
      parameters:
        - name: taskId
          required: true
          in: path
          description: task id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Updated task
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteTask
      summary: Deletes task
      description: Deletes task
      security:
        - BearerAuth:
            - manager
      tags:
        - Tasks
      parameters:
        - name: taskId
          required: true
          in: path
          description: task id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty response indicating successful removal
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /delivery-info/v1/freights:
    get:
      operationId: listFreights
      summary: List Freights.
      description: Lists Freights.
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - Freights
      parameters:
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of freights
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Freight"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createFreight
      summary: Create freight
      description: Create new freight
      security:
        - BearerAuth:
            - manager
      tags:
        - Freights
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Freight"
        description: Payload
        required: true
      responses:
        "200":
          description: Created freight
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Freight"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /delivery-info/v1/freights/{freightId}:
    get:
      operationId: findFreight
      summary: Find a freight.
      description: Finds a freight by id.
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - Freights
      parameters:
        - name: freightId
          required: true
          in: path
          description: freight id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found freight
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Freight"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateFreight
      summary: Updates freight
      description: Updates single freight
      security:
        - BearerAuth:
            - manager
      tags:
        - Freights
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Freight"
        description: Payload
        required: true
      parameters:
        - name: freightId
          required: true
          in: path
          description: freight id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Updated freight
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Freight"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteFreight
      summary: Deletes freight
      description: Deletes freight
      security:
        - BearerAuth:
            - manager
      tags:
        - Freights
      parameters:
        - name: freightId
          required: true
          in: path
          description: freight id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty response indicating successful removal
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /delivery-info/v1/freightUnits:
    get:
      operationId: listFreightUnits
      summary: List FreightUnits.
      description: Lists FreightUnits.
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - FreightUnits
      parameters:
        - name: freightId
          in: query
          description: Freight id
          schema:
            type: string
            format: uuid
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of freight units
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FreightUnit"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createFreightUnit
      summary: Create freight unit
      description: Create new freight unit
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - FreightUnits
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FreightUnit"
        description: Payload
        required: true
      responses:
        "200":
          description: Created freight unit
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FreightUnit"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /delivery-info/v1/freightUnits/{freightUnitId}:
    get:
      operationId: findFreightUnit
      summary: Find a freight unit.
      description: Finds a freight unit by id.
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - FreightUnits
      parameters:
        - name: freightUnitId
          required: true
          in: path
          description: freight unit id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found freight unit
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FreightUnit"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateFreightUnit
      summary: Updates freight unit
      description: Updates single freight unit
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - FreightUnits
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FreightUnit"
        description: Payload
        required: true
      parameters:
        - name: freightUnitId
          required: true
          in: path
          description: freight unit id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Updated freight unit
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FreightUnit"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteFreightUnit
      summary: Deletes freight unit
      description: Deletes freight unit
      security:
        - BearerAuth:
            - manager
      tags:
        - FreightUnits
      parameters:
        - name: freightUnitId
          required: true
          in: path
          description: freight unit id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty response indicating successful removal
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /delivery-info/v1/temperatureRecords:
    get:
      operationId: listTemperatureRecords
      summary: Lists temperature records
      description: Lists temperature records
      security:
        - BearerAuth:
            - manager
      tags:
        - TemperatureRecords
      parameters:
        - name: terminalId
          in: query
          description: Terminal id
          schema:
            type: string
            format: uuid
        - name: deviceId
          in: query
          description: Device id
          schema:
            type: string
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of temperature records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TemperatureRecord"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createTemperatureRecord
      summary: Create a temperature record
      description: Create a temperature record
      security:
        - BearerAuth:
            - manager
      tags:
        - TemperatureRecords
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemperatureRecord"
        description: Payload
        required: true
      responses:
        "200":
          description: Created temperature record
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemperatureRecord"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /delivery-info/v1/temperatureRecords/{temperatureRecordId}:
    delete:
      operationId: deleteTemperatureRecord
      summary: Deletes a temperature record
      description: Deletes a temperature record
      security:
        - BearerAuth:
            - manager
      tags:
        - TemperatureRecords
      parameters:
        - name: temperatureRecordId
          required: true
          in: path
          description: temperature record id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty response indicating successful removal
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  securitySchemes:
    DriverAppApiKeyAuth:
      type: apiKey
      in: header
      name: X-DriverApp-API-Key
    DataReceiverApiKeyAuth:
      type: apiKey
      in: header
      name: X-DataReceiver-API-Key
    KeycloakApiKeyAuth:
      type: apiKey
      in: header
      name: X-Keycloak-API-Key
    CronKeyAuth:
      type: apiKey
      in: header
      name: X-CRON-Key
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    PublicTruck:
      type: object
      description: Represent public info of single truck
      required:
        - plateNumber
        - vin
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        plateNumber:
          type: string
        vin:
          type: string
          description: >
            Truck identification number. This is unique for each truck and
            should be used as a hardware identifier for this specific truck.
    Error:
      type: object
      description: Error object
      required:
        - status
        - message
      properties:
        status:
          type: integer
          format: int32
        message:
          type: string
    TruckSortByField:
      type: string
      enum:
        - NAME
        - PLATE_NUMBER
    SortOrder:
      type: string
      enum:
        - ASCENDING
        - DESCENDING
    Truck:
      type: object
      description: Represent single truck
      required:
        - plateNumber
        - type
        - vin
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        imei:
          type: string
          description: The unique IMEI of the truck, used to identify it when associating
            with a thermometer.
        plateNumber:
          type: string
        type:
          type: string
          enum:
            - TRUCK
            - SEMI_TRUCK
        vin:
          type: string
          description: >
            Truck identification number. This is unique for each truck and
            should be used as a hardware identifier for this specific truck.
        activeVehicleId:
          type: string
          format: uuid
          readOnly: true
          description: >
            Active vehicle id. This is the current vehicle that the truck is
            part of. It updates whenever the vehicle structure is updated.
        creatorId:
          type: string
          readOnly: true
          format: uuid
        createdAt:
          format: date-time
          type: string
          readOnly: true
        lastModifierId:
          type: string
          readOnly: true
          format: uuid
        modifiedAt:
          format: date-time
          type: string
          readOnly: true
        archivedAt:
          type: string
          format: date-time
          description: >
            Setting the archivedAt time marks the truck as archived. Trucks
            marked as archived will not appear in list requests unless archived
            filter is set to true. Archived truck cannot be updated, unless
            archivedAt is first set to null.
    TruckDriverCard:
      type: object
      required:
        - id
        - timestamp
      properties:
        id:
          type: string
          description: Driver card ID
        timestamp:
          type: integer
          format: int64
          description: Timestamp for driver card insertion. Unix timestamp in milliseconds.
        removedAt:
          type: string
          format: date-time
          description: Removed at. Used to check for grace period for driver card removal.
    TruckLocation:
      type: object
      required:
        - timestamp
        - latitude
        - longitude
        - heading
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        timestamp:
          type: integer
          format: int64
          description: Timestamp for truck speed
        latitude:
          type: number
          format: double
          description: Latitude in degrees.
        longitude:
          type: number
          format: double
          description: Longitude in degrees.
        heading:
          type: number
          format: double
          description: heading in degrees.
    TruckSpeed:
      type: object
      required:
        - timestamp
        - speed
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Truck speed ID
        timestamp:
          type: integer
          format: int64
          description: Timestamp for truck speed. Unix timestamp in milliseconds.
        speed:
          type: number
          format: float
    TruckDriveStateEnum:
      type: string
      enum:
        - REST
        - DRIVER_AVAILABLE
        - WORK
        - DRIVE
        - ERROR
        - NOT_AVAILABLE
    TruckDriveState:
      type: object
      required:
        - timestamp
        - state
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Truck drive state ID
        timestamp:
          type: integer
          format: int64
          description: Timestamp for truck drive state
        state:
          $ref: "#/components/schemas/TruckDriveStateEnum"
        driverId:
          type: string
          format: uuid
          readOnly: true
          description: Driver ID.
        driverCardId:
          type: string
          description: Driver card ID. This is used to identify the driver when creating a
            new drive state.
    TruckOdometerReading:
      type: object
      required:
        - timestamp
        - odometerReading
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Truck odometer ID
        timestamp:
          type: integer
          format: int64
          description: Timestamp for truck odometer.
        odometerReading:
          type: integer
          format: int32
          description: Odometer reading in meters. See [Teltonika FMC650 Data Sending
            Parameters ID - Tachograph Data
            Elements](https://wiki.teltonika-gps.com/view/FMC650_Teltonika_Data_Sending_Parameters_ID#Tachograph_data_elements)
    Temperature:
      type: object
      description: Represents a single temperature reading record
      required:
        - thermometerId
        - value
        - timestamp
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier for the temperature record
        thermometerId:
          type: string
          format: uuid
          description: The ID of the thermometer from which the reading was taken
        value:
          type: number
          format: float
          description: The temperature value in Celsius
        timestamp:
          type: integer
          format: int64
          description: The timestamp when the temperature was recorded
    TemperatureReading:
      type: object
      description: Represents a single temperature reading being received from a thermometer
      required:
        - hardwareSensorId
        - deviceIdentifier
        - value
        - timestamp
        - sourceType
      properties:
        deviceIdentifier:
          type: string
          description: >
            unique ID of the device the sensor is connected to.

            ID is an IMEI when value is received from truck or towable and MAC address when received from terminal.
        hardwareSensorId:
          type: string
          description: Unique hardware sensor ID that is sending this temperature reading
        value:
          type: number
          format: float
          description: >
            The temperature value in Celsius. In case of a truck or towable, a
            valid value is within the range of -55.0 to 115.0.

            Invalid/error values as mapped from [Teltonika documentation](https://wiki.teltonika-gps.com/view/FMC650_Teltonika_Data_Sending_Parameters_ID#Permanent_I/O_elements) :
              - 850.0 - Sensor not ready
              - 2000.0 - Value read error
              - 3000.0 - Not connected
              - 4000.0 - ID Failed
              - 5000.0 - Same as 850.0
        timestamp:
          type: integer
          format: int64
          description: Timestamp for when the temperature was read. Unix timestamp in
            milliseconds.
        sourceType:
          $ref: "#/components/schemas/TemperatureReadingSourceType"
    Towable:
      type: object
      description: Represent single towable
      required:
        - plateNumber
        - type
        - vin
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        imei:
          type: string
          description: The unique IMEI of the towable, used to identify it when
            associating with a thermometer.
        plateNumber:
          type: string
        type:
          type: string
          enum:
            - TRAILER
            - SEMI_TRAILER
            - DOLLY
        vin:
          type: string
          description: >
            Towable identification number. This is unique for each towable and
            should be used as a hardware identifier for this specific towable.
        creatorId:
          type: string
          readOnly: true
          format: uuid
        createdAt:
          format: date-time
          type: string
          readOnly: true
        lastModifierId:
          type: string
          readOnly: true
          format: uuid
        modifiedAt:
          format: date-time
          type: string
          readOnly: true
        archivedAt:
          type: string
          format: date-time
          description: >
            Setting the archivedAt time marks the towable as archived. Towables
            marked as archived will not appear in list requests unless archived
            filter is set to true. Archived towable cannot be updated, unless
            archivedAt is first set to null.
    Vehicle:
      type: object
      description: Represent single vehicle
      required:
        - truckId
        - towableIds
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        truckId:
          type: string
          description: Truck that towing the vehicle
          format: uuid
        towableIds:
          type: array
          description: >
            List of attached towables to vehicle. Order of towables should
            reflect the order of towables in the vehicle where first towable is
            the closest to the truck.
          items:
            type: string
            format: uuid
        creatorId:
          type: string
          readOnly: true
          format: uuid
        createdAt:
          format: date-time
          type: string
          readOnly: true
        lastModifierId:
          type: string
          readOnly: true
          format: uuid
        modifiedAt:
          format: date-time
          type: string
          readOnly: true
        archivedAt:
          type: string
          format: date-time
          description: >
            Setting the archivedAt time marks the vehicle as archived. Vehicles
            marked as archived will not appear in list requests unless archived
            filter is set to true. Archived vehicle cannot be updated, unless
            archivedAt is first set to null.
    Thermometer:
      type: object
      description: Represents a thermometer attached to a truck or towable
      required:
        - macAddress
        - entityId
        - entityType
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier for the thermometer
        name:
          type: string
          description: Name of the thermometer
        macAddress:
          type: string
          description: MAC address of the thermometer. It is unique and stays with the
            device.
        entityId:
          type: string
          format: uuid
          description: The ID of the entity currently associated with the thermometer.
        entityType:
          type: string
          description: The type of the entity to which the thermometer is attached (e.g.,
            "towable", "truck", etc.)
          enum:
            - truck
            - towable
        creatorId:
          type: string
          readOnly: true
          format: uuid
        createdAt:
          format: date-time
          type: string
          readOnly: true
        lastModifierId:
          type: string
          readOnly: true
          format: uuid
        modifiedAt:
          format: date-time
          type: string
          readOnly: true
        archivedAt:
          type: string
          format: date-time
          description: >
            Setting the archivedAt time marks the thermometer as archived.
            Thermometers marked as archived will not appear in list requests
            unless includeArchived filter is set to true. Archived thermometer
            cannot be updated, unless archivedAt is first set to null.
    TemperatureReadingSourceType:
      type: string
      enum:
        - TRUCK
        - TOWABLE
        - TERMINAL
    Route:
      type: object
      description: Represent single planned route for single truck driver
      required:
        - name
        - departureTime
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        truckId:
          type: string
          format: uuid
          description: Truck id
        driverId:
          type: string
          format: uuid
          description: Driver id
        name:
          type: string
          description: Name of the route
        departureTime:
          type: string
          format: date-time
          description: Departure time of the route
        creatorId:
          type: string
          readOnly: true
          format: uuid
        createdAt:
          format: date-time
          type: string
          readOnly: true
        lastModifierId:
          type: string
          readOnly: true
          format: uuid
        modifiedAt:
          format: date-time
          type: string
          readOnly: true
    Driver:
      type: object
      description: Represents single truck driver
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        displayName:
          type: string
          description: Driver display name
        archivedAt:
          type: string
          format: date-time
          description: >
            Setting the archivedAt time marks the driver as archived. Drivers
            marked as archived will not appear in list requests unless archived
            filter is set to true. Archived driver cannot be updated, unless
            archivedAt is first set to null.
    SalaryGroup:
      type: string
      description: >
        Employee's salary group

        Kuljettaja (Driver) - Should be default IF the employees office is not KOTKA

        VP-Logistics (VPlogistics)

        Office

        Terminal
      enum:
        - DRIVER
        - VPLOGISTICS
        - OFFICE
        - TERMINAL
    EmployeeType:
      type: string
      enum:
        - PA
        - KA
        - AH
        - VK
        - TH
        - TP
        - AJ
        - JH
        - AP
        - KK
        - POIS
        - TPK
      description: >
        Employee's type described as finnish abbreviation. UI implementations
        should translate these to more human readable form.


        | Abbreviation | finnish name            |

        | ------------ | ----------------------- |

        | PA           | Pakettiautonkuljettaja  |

        | KA           | Kuorma-auton kuljettaja |

        | AH           | Alihankkija             |

        | VK           | Vuokratyöntekijä        |

        | TH           | Työharjoittelija        |

        | TP           | Tilapäistyöntekijä      |

        | AJ           | Ajojärjestelijä         |

        | JH           | Esimies                 |

        | AP           | Aikatuntipalkka         |

        | KK           | Kuukausipalkka          |

        | POIS         | Ei-aktiivinen           |

        | TPK          | Täysperäkuljettaja      |
    Office:
      type: string
      description: Employee's office. Salary group should be set to VPLogistics if the
        office is KOTKA
      enum:
        - KOTKA
        - KOUVOLA
        - RAUHA
    Employee:
      type: object
      description: Represents single employee
      required:
        - firstName
        - lastName
        - type
        - salaryGroup
        - office
        - employeeNumber
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        firstName:
          type: string
          description: Employee's first name
        lastName:
          type: string
          description: Employee's last name
        driverCardId:
          type: string
          description: Employee's driver card ID.
        pinCode:
          type: string
          description: Employee's PIN code.
        type:
          $ref: "#/components/schemas/EmployeeType"
        salaryGroup:
          $ref: "#/components/schemas/SalaryGroup"
        office:
          $ref: "#/components/schemas/Office"
        regularWorkingHours:
          type: number
          format: float
          description: >
            Employee's regular working hours per two weeks. Used for employee's
            whose salary group is either Driver or VPLogistics.
        driverCardLastReadOut:
          type: string
          format: date-time
          description: >
            Last time the driver card was read out. In the beginning this should
            be set manually but later probably automated.
        employeeNumber:
          type: string
          description: Employee's number. Should be unique.
        email:
          type: string
          description: Employee's email address
        phoneNumber:
          type: string
          description: Employee's phone number
        archivedAt:
          type: string
          format: date-time
          description: >
            Setting the archivedAt time marks the employee as archived.
            Employees marked as archived will not appear in list requests unless
            archived filter is set to true. Archived employee cannot be updated,
            unless archivedAt is first set to null.
    EmployeeWorkShift:
      type: object
      description: >
        Represents single employee work shift. A work event must always relate
        to an employee work shift.


        When created, the work shift is not approved. It needs to be approved by a supervisor before the

        work shift hours can be sent to payroll.


        Employee work shift always relates to a single date. When work shift is created during the creation of

        a work event, the date is derived from the work event. When created manually, the date should also be

        set manually.


        EndedAt and startedAt are derived from the work events in the shift. StartedAt is based on SHIFT_START event

        and endedAt is based on SHIFT_END event. When the corresponding event is not found, the time is null.


        When calculating salaries for a work period, all work shifts started within the period will be included

        in their entirety, even if the events of the shifts would time-wise be outside the period.
      required:
        - date
        - employeeId
        - approved
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date:
          type: string
          format: date
          description: Work shift date.
        startedAt:
          type: string
          format: date-time
          readOnly: true
          description: Work shift start time
        endedAt:
          type: string
          format: date-time
          readOnly: true
          description: Work shift end time
        employeeId:
          type: string
          format: uuid
          description: Employee's ID
        truckIds:
          readOnly: true
          type: array
          items:
            type: string
            format: uuid
          description: List of truck IDs used during the work shift. Derived from work
            events in the shift.
        dayOffWorkAllowance:
          type: boolean
          description: >
            Day off work allowance is used to mark the day when the work shift
            started as a day off for the employee.

            This means that all the work hours done during that day will be also added to the HOLIDAY_ALLOWANCE work

            type during work shift hours calculation.
        absence:
          $ref: "#/components/schemas/AbsenceType"
        perDiemAllowance:
          $ref: "#/components/schemas/PerDiemAllowanceType"
        approved:
          type: boolean
          description: >
            Whether the work shift has been approved by a supervisor. Work shift
            hours cannot be updated if

            the work shift is approved.
        notes:
          type: string
          description: Additional notes for the work shift. For example, if the employee
            was sick during the shift.
        payrollExportId:
          type: string
          format: uuid
          readOnly: true
          description: >
            Payroll export ID. This is filled when work shift is linked to a
            payroll export. Work shift cannot be

            included in another payroll export if it is already linked to one.
    WorkEvent:
      type: object
      description: >
        Represents single work event.


        Whenever employee tracks a new work event, it is determined, whether a new work shift should be created for

        the event, or if the event should be added to the shift of the last work event recorded.


        A new work shift should be created, if either

        - There are no previous work events for the employee, or

        - The last work event is of type SHIFT_END, or

        - The last work event is of type BREAK or UNKNOWN and has been going on longer than 3 hours


        A work shift might already exist for the current day with _no_ events. This can happen, if a shift has been

        created manually by the manager in advance. In this case, whenever a new shift would be created, the event

        should be added to this existing work shift instead.
      required:
        - employeeId
        - time
        - workEventType
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        employeeId:
          type: string
          format: uuid
          description: Employee's ID
        employeeWorkShiftId:
          type: string
          format: uuid
          readOnly: true
          description: employee work shift ID
        time:
          type: string
          format: date-time
          description: Work event time
        truckId:
          type: string
          format: uuid
          description: The ID of truck used during the work event
        workEventType:
          $ref: "#/components/schemas/WorkEventType"
    WorkType:
      type: string
      description: >
        Work type of the work shift hours. A single work type represents
        aggregated value from

        one or more work event types.


        | name                   | finnish name         |

        | ---------------------- | -------------------- |

        | PAID_WORK              | Palkallinen työ      |

        | BREAK                  | Tauko                |

        | STANDBY                | Odotus               |

        | EVENING_ALLOWANCE      | Iltatyö              |

        | NIGHT_ALLOWANCE        | Yötyö                |

        | HOLIDAY_ALLOWANCE      | Pyhälisä             |

        | JOB_SPECIFIC_ALLOWANCE | Työkohtaisuuslisä    |

        | FROZEN_ALLOWANCE       | Pakastelisä          |
      enum:
        - PAID_WORK
        - BREAK
        - STANDBY
        - EVENING_ALLOWANCE
        - NIGHT_ALLOWANCE
        - HOLIDAY_ALLOWANCE
        - JOB_SPECIFIC_ALLOWANCE
        - FROZEN_ALLOWANCE
    WorkShiftHours:
      type: object
      description: >
        Represents a single work shift hours.


        Work shift hours contain the total hours for a specific employee, work shift and work type. The hours are always

        calculated dynamically during a request.


        Work shift hours also contains the actual hours that have been manually set by a supervisor. The actual hours

        should always be prioritized over the calculated hours when displaying the aggregated hours and sending the

        data to payroll.


        Work shift hours for all available work types are created automatically when related employee work shift is created.

        Only a single work shift hours per employee per work shift per work type is allowed. If one already exists, it

        should be updated.


        Work shift hours cannot be updated if the related employee work shift is approved.


        #### Work shift hours calculation


        Following work event types are only used to track the life cycle of the employee work shift. Hence, these types

        are not used in calculations at all.

        - SHIFT_START

        - SHIFT_END

        - LOGIN

        - LOGOUT

        - DRIVER_CARD_INSERTED

        - DRIVER_CARD_REMOVED

        - UNKNOWN


        ##### Work shift hours for all of the work types are calculated as follows


        ###### PAID_WORK

        Everything else apart from work event type BREAK.


        ###### BREAK

        Only work event type BREAK.


        ###### STANDBY

        Not calculated at all. It can only be added manually from the management.


        ###### EVENING_ALLOWANCE

        All hours from the PAID_WORK that are recorded between 18.00 and 20.00.


        ###### NIGHT_ALLOWANCE

        All hours from the PAID_WORK that are recorded between 20.00 and 06.00.


        ###### HOLIDAY_ALLOWANCE

        All hours from the PAID_WORK that are recorded during one of the following

        - Sunday

        - Public holiday
          - a corresponding date is found from holidays table with type PUBLIC_HOLIDAY_ALLOWANCE
        - Day off work
          - either
            - a corresponding date is found from holidays table with type DAY_OFF_WORK_ALLOWANCE, or
            - any of the shifts, which started during the day, is marked as dayOffWorkAllowance

        ###### JOB_SPECIFIC_ALLOWANCE

        Not calculated at all. It can only be added manually from the management.


        ###### FROZEN_ALLOWANCE

        All hours from the PAID_WORK that are recorded from the frozen section.
      required:
        - employeeId
        - employeeWorkShiftId
        - workType
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        employeeId:
          type: string
          format: uuid
          description: Employee's ID
        employeeWorkShiftId:
          type: string
          format: uuid
          description: Employee work shift's ID
        workType:
          $ref: "#/components/schemas/WorkType"
        calculatedHours:
          type: number
          format: float
          readOnly: true
          description: >
            Calculated hours for the employee work shift for corresponding work
            type. This should always be dynamically

            calculated from the actual work events in the work shift. Cannot be updated.
        actualHours:
          type: number
          format: float
          description: >
            Actual, manually recorded hours for the employee work shift for
            corresponding work type. It is null until

            the hours are manually set.
    Holiday:
      type: object
      description: Represents a single holiday
      required:
        - date
        - name
        - compensationType
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date:
          type: string
          format: date
          description: Holiday date
        name:
          type: string
          description: Holiday name
        compensationType:
          $ref: "#/components/schemas/CompensationType"
        creatorId:
          type: string
          format: uuid
          description: Creator's ID
        lastModifierId:
          type: string
          format: uuid
          description: Last modifier's ID
        createdAt:
          type: string
          format: date-time
          description: Creation time
        modifiedAt:
          type: string
          format: date-time
          description: Last modified time
    ClientAppStatus:
      type: string
      description: Client app status
      enum:
        - WAITING_FOR_APPROVAL
        - APPROVED
    ClientApp:
      type: object
      description: >
        Represents single client app.


        Client apps are created when a new client app publishes itself to the system. Apps will be in

        WAITING_FOR_APPROVAL status until a manager approves them. Three months after its approval a client app will

        again change to WAITING_FOR_APPROVAL status. The app will then need to be approved again by a manager.


        The device ID of the client app is used together with user PIN code during authentication.
      required:
        - deviceId
        - status
        - metadata
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        deviceId:
          type: string
          description: Device ID
        name:
          type: string
          description: Device name
        status:
          $ref: "#/components/schemas/ClientAppStatus"
        metadata:
          $ref: "#/components/schemas/ClientAppMetadata"
        lastLoginAt:
          type: string
          format: date-time
          description: Last time the client app has logged in to the system
        createdAt:
          type: string
          format: date-time
          description: Creation time
        lastModifierId:
          type: string
          format: uuid
          description: Last modifier's ID
        modifiedAt:
          type: string
          format: date-time
          description: Last modified time
    VerifyClientAppRequest:
      type: object
      properties:
        deviceId:
          type: string
          description: device ID
    PayrollExport:
      description: >
        Represents a single payroll export.


        A payroll export is created when a list of work shifts of a single employee is sent to payroll management.

        The export is created by a manager and contains a list of work shift IDs that are sent to payroll. All of

        the included work shifts must be approved before the export can be created. The total work hours are then

        calculated from the work shifts and sent to payroll management in a CSV file.
      type: object
      required:
        - employeeId
        - workShiftIds
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        employeeId:
          type: string
          format: uuid
          description: Employee's ID
        workShiftIds:
          type: array
          items:
            type: string
            format: uuid
          description: List of work shift IDs included in the payroll export
        csvFileName:
          type: string
          readOnly: true
          description: Name of CSV file sent to payroll management.
        creatorId:
          type: string
          format: uuid
          description: Creator's ID
        exportedAt:
          type: string
          format: date-time
          description: Export time
    WorkEventType:
      type: string
      enum:
        - VEGETABLE
        - DRY
        - MEAT_CELLAR
        - MEIRA
        - FROZEN
        - PALTE
        - BREWERY
        - GREASE
        - OFFICE
        - LOGIN
        - LOGOUT
        - OTHER_WORK
        - BREAK
        - SHIFT_START
        - SHIFT_END
        - UNKNOWN
        - DRIVE
        - LOADING
        - UNLOADING
        - AVAILABILITY
        - DRIVER_CARD_INSERTED
        - DRIVER_CARD_REMOVED
      description: >
        Work event types. UI implementations should translate these to more
        human readable form.


        *Driver work types*

        | name                 | finnish name               |

        | -------------------- | -------------------------- |

        | DRIVE                | Ajo                        |

        | LOADING              | Lastaus                    |

        | UNLOADING            | Purku                      |

        | AVAILABILITY         | Saatavuus                  |

        | DRIVER_CARD_INSERTED | Kuljettajakortti syötetty  |

        | DRIVER_CARD_REMOVED  | Kuljettajakortti poistettu |


        *Office/Terminal work types*

        | name        | finnish name         |

        | ----------- | -------------------- |

        | VEGETABLE   | Hevi                 |

        | DRY         | Kuiva                |

        | MEAT_CELLAR | Lihakellari          |

        | MEIRA       | Meira                |

        | FROZEN      | Pakaste              |

        | PALTE       | Palte                |

        | BREWERY     | Panimo               |

        | GREASE      | Rasva                |

        | OFFICE      | Toimisto             |

        | LOGIN       | Sisäänkirjautuminen  |

        | LOGOUT      | Uloskirjautuminen    |


        *Common work types*

        | name        | finnish name         |

        | ----------- | -------------------- |

        | OTHER_WORK  | Muu työ              |

        | BREAK       | Tauko                |

        | SHIFT_START | Työvuoron alku       |

        | SHIFT_END   | Työvuoron loppu      |

        | UNKNOWN     | Tuntematon           |
    CompensationType:
      type: string
      enum:
        - PUBLIC_HOLIDAY_ALLOWANCE
        - DAY_OFF_WORK_ALLOWANCE
    PerDiemAllowanceType:
      type: string
      description: Per diem allowance
      enum:
        - PARTIAL
        - FULL
    AbsenceType:
      type: string
      enum:
        - TRAINING
        - VACATION
        - OFFICIAL_DUTIES
        - COMPENSATORY_LEAVE
        - SICK_LEAVE
      description: >
        Absence types are used to mark the absence type of the employee work
        shift. Absences are taken into account when

        calculating the total working hours for employee when determining working hours for payroll. They might also

        affect the allowance hours of the work period.


        Here are definitions for the absence types:


        | name               | abbreviation | finnish name       | work hours | work hours on holiday | affects allowance hours |

        | ------------------ | ------------ | ------------------ | ---------- | --------------------- | ----------------------- |

        | TRAINING           | KO           | Koulutus työajalla | 8h         | 8h                    | no                      |

        | VACATION           | LO           | Loma               | 6.67h      | 0h                    | yes                     |

        | OFFICIAL_DUTIES    | LT           | Luottamustoimet    | 8h         | 8h                    | yes                     |

        | COMPENSATORY_LEAVE | PP           | Pekkanen           | 8h         | 8h                    | yes                     |

        | SICK_LEAVE         | SL           | Sairausloma        | 8h         | 8h                    | yes                     |
    ClientAppMetadata:
      type: object
      description: Client app metadata
      properties:
        deviceOS:
          type: string
          description: Device OS
          enum:
            - ANDROID
        deviceOSVersion:
          type: string
          description: Device OS version
        appVersion:
          type: string
          description: App version
    Site:
      type: object
      description: Represents a single customer site
      required:
        - name
        - location
        - address
        - postalCode
        - locality
        - siteType
        - deviceIds
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          description: Site name
        location:
          type: string
          format: wkt
          description: Site location as well-known text Point
        address:
          type: string
          description: Address of the site
        postalCode:
          type: string
          description: Postal code of the site
        locality:
          type: string
          description: Locality of the site
        deviceIds:
          type: array
          items:
            type: string
        siteType:
          $ref: "#/components/schemas/SiteType"
        additionalInfo:
          type: string
          description: >
            additional information about the site, e.g. delivery instructions.
            This is shown in the task for the driver.
        creatorId:
          type: string
          readOnly: true
          format: uuid
        createdAt:
          format: date-time
          type: string
          readOnly: true
        lastModifierId:
          type: string
          readOnly: true
          format: uuid
        modifiedAt:
          format: date-time
          type: string
          readOnly: true
        archivedAt:
          type: string
          format: date-time
          description: >
            Setting the archivedAt time marks the site as archived. Sites marked
            as archived will not appear in list requests unless archived filter
            is set to true. Archived site cannot be updated, unless archivedAt
            is first set to null.
    TaskType:
      type: string
      description: Type of the task
      enum:
        - UNLOAD
        - LOAD
    Task:
      type: object
      description: Represent single task for freight
      required:
        - freightId
        - customerSiteId
        - type
        - groupNumber
        - status
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        freightId:
          type: string
          format: uuid
          description: Freight id
        customerSiteId:
          type: string
          format: uuid
          description: Customer site id
        type:
          $ref: "#/components/schemas/TaskType"
        groupNumber:
          type: integer
          description: >
            Group number of the task. Gets a value of 0 by default. Can be
            updated from the management UI. All tasks with the same freightId,
            customerSiteId, type and group number are shown as grouped together
            in the driver app.
        orderNumber:
          type: integer
          description: >
            Order number of the task. Tasks have order numbers when being part
            of a route (having a routeId). Unallocated tasks (not having a
            routeId) do not have order numbers. When creating/updating a route
            with a routeId, the order number MUST also be in place. Negative
            order numbers are not allowed. If a number higher than the current
            amount of tasks in the route is used, it will be silently updated to
            be one higher than the current maximum. When either routeId or
            orderNumber is updated to a task, order numbers of other tasks with
            the same routeId are also updated accordingly. This means all of the
            tasks in a route should be reloaded when order number of a single
            task is updated. When updating a task to have an order number that
            already exists in the same route, the existing task is placed after
            the updated task. Tasks are also displayed as grouped, when they
            have the same routeId, customerSiteId, type and groupNumber. Order
            of tasks inside a group does not matter, so a new task added to the
            group will be the last task in the group. When order is updated, the
            grouping should be taken into account in order numbers. All of the
            grouped tasks should be next to each other. A task after the grouped
            tasks should have the next order number from the highest one of the
            group.
        status:
          $ref: "#/components/schemas/TaskStatus"
        remarks:
          type: string
          description: Task remarks
        routeId:
          type: string
          format: uuid
          description: Route id
        startedAt:
          type: string
          format: date-time
          readOnly: true
          description: >
            Time the task was started at. Filled when task status is changed
            from TODO to IN_PROGRESS.
        finishedAt:
          type: string
          format: date-time
          readOnly: true
          description: >
            Time the task was finished at. Filled when task status is changed
            from IN_PROGRESS to DONE.
        creatorId:
          type: string
          readOnly: true
          format: uuid
        createdAt:
          format: date-time
          type: string
          readOnly: true
        lastModifierId:
          type: string
          readOnly: true
          format: uuid
        modifiedAt:
          format: date-time
          type: string
          readOnly: true
    Freight:
      type: object
      description: Represents a single freight shipment, aka. waybill.
      required:
        - senderSiteId
        - recipientSiteId
        - pointOfDepartureSiteId
        - destinationSiteId
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        freightNumber:
          type: integer
          readOnly: true
          description: Freight number. Unique and auto-incremented.
        senderSiteId:
          type: string
          format: uuid
          description: Shipment sender site
        recipientSiteId:
          type: string
          format: uuid
          description: Shipment receiver site
        pointOfDepartureSiteId:
          type: string
          format: uuid
          description: Point of departure site
        destinationSiteId:
          type: string
          format: uuid
          description: Point of arrival site
        creatorId:
          type: string
          readOnly: true
          format: uuid
        createdAt:
          format: date-time
          type: string
          readOnly: true
        lastModifierId:
          type: string
          readOnly: true
          format: uuid
        modifiedAt:
          format: date-time
          type: string
          readOnly: true
    FreightUnit:
      type: object
      description: Represents a single freight unit in a freight shipment.
      required:
        - freightId
        - type
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        freightId:
          type: string
          format: uuid
          description: Id of the freight shipment
        type:
          type: string
          description: Type of the unit
        quantity:
          type: number
          format: double
          description: Quantity of the unit, can be a decimal number
        contents:
          type: string
          description: Description of contents of the unit
        reservations:
          type: string
          description: Reservations for the unit
        creatorId:
          type: string
          readOnly: true
          format: uuid
        createdAt:
          format: date-time
          type: string
          readOnly: true
        lastModifierId:
          type: string
          readOnly: true
          format: uuid
        modifiedAt:
          format: date-time
          type: string
          readOnly: true
    TemperatureRecord:
      type: object
      description: Temperature record
      required:
        - hardwareSensorId
        - deviceIdentifier
        - value
        - timestamp
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        deviceIdentifier:
          type: string
          description: |
            ESP device address
        hardwareSensorId:
          type: string
          description: Unique hardware sensor ID that is sending this temperature reading
        value:
          type: number
          format: float
          description: |
            The temperature value in Celsius.
        timestamp:
          type: integer
          format: int64
          description: Timestamp for when the temperature was read. Unix timestamp in
            milliseconds.
    SiteType:
      type: string
      description: Type of the site
      enum:
        - CUSTOMER_SITE
        - TERMINAL
    TaskStatus:
      type: string
      description: Status of the task
      enum:
        - TODO
        - IN_PROGRESS
        - DONE

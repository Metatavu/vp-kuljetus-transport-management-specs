openapi: 3.0.3
info:
  version: 1.0.0
  title: VP-Kuljetus User Management Services

security:
  - BearerAuth: [driver, manager]
  - ApiKeyAuth: []

x-tyk-api-gateway:
  info:
    id: user-management-services
    orgId: vp
    name: User Management Services
    state:
      active: true
  upstream:
    url: http://user-management
  server:
    listenPath:
      value: /user-management/
      strip: true

paths:
  /v1/system/ping:
    get:
      operationId: ping
      summary: Replies with pong
      description: Replies ping with pong
      security: []
      tags:
        - System
      responses:
        "200":
          description: Pong
          content:
            text/plain:
              schema:
                type: string

  /v1/drivers:
    get:
      operationId: listDrivers
      summary: List Drivers.
      description: Lists Drivers.
      security:
        - BearerAuth: [manager]
        - ApiKeyAuth: []
      tags:
        - Drivers
        - SpecManagementUI
      parameters:
        - name: driverCardId
          in: query
          description: Filter drivers by driver card ID. Will return 0 to 1 drivers.
          schema:
            type: string
        - name: archived
          in: query
          description: Filter drivers by archived status
          schema:
            type: boolean
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of routes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Driver"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/v1/drivers/{driverId}":
    get:
      operationId: findDriver
      summary: Find a driver.
      description: Finds a driver by ID.
      security:
        - BearerAuth: [driver, manager]
      tags:
        - Drivers
        - SpecApp
        - SpecManagementUI
      parameters:
        - name: driverId
          required: true
          in: path
          description: driver's ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found driver
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Driver"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/employees:
    get:
      operationId: listEmployees
      summary: List Employees.
      description: Lists Employees. A user is considered an employee if they're given the employee realm role.
      security:
        - BearerAuth: [manager]
      tags:
        - Employees
        - SpecManagementUI
      parameters:
        - name: search
          in: query
          description: Search string. Should search from first and last names.
          schema:
            type: string
        - name: salaryGroup
          in: query
          description: Filter employees by salary group
          schema:
            $ref: "#/components/schemas/SalaryGroup"
        - name: type
          in: query
          description: Filter employees by type
          schema:
            $ref: "#/components/schemas/EmployeeType"
        - name: office
          in: query
          description: Filter employees by office
          schema:
            $ref: "#/components/schemas/Office"
        - name: archived
          in: query
          description: Filter employees by archived status
          schema:
            type: boolean
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
            default: 0
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: List of employees
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Employee"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createEmployee
      summary: Create Employee.
      description: Creates Employee. All new users created via this endpoint should be given the employee realm role.
      security:
        - BearerAuth: [manager]
      tags:
        - Employees
        - SpecManagementUI
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Employee"
      responses:
        "201":
          description: Created employee
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/v1/employees/{employeeId}":
    get:
      operationId: findEmployee
      summary: Find an employee.
      description: Finds an employee by ID.
      security:
        - BearerAuth: [manager]
      tags:
        - Employees
        - SpecManagementUI
      parameters:
        - name: employeeId
          required: true
          in: path
          description: employee's ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found employee
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateEmployee
      summary: Update Employee.
      description: Updates Employee.
      security:
        - BearerAuth: [manager]
      tags:
        - Employees
        - SpecManagementUI
      parameters:
        - name: employeeId
          required: true
          in: path
          description: employee's ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Employee"
      responses:
        "200":
          description: Updated employee
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteEmployee
      summary: Delete Employee.
      description: |
        Deletes Employee.
        This should only be allowed to be used in tests. In production usage the employee should be archived instead.
      security:
        - BearerAuth: [manager]
      tags:
        - Employees
        - SpecManagementUI
      parameters:
        - name: employeeId
          required: true
          in: path
          description: employee's ID
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty response indicating successful removal
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/v1/employees/{employeeId}/workShifts":
    get:
      operationId: listEmployeeWorkShifts
      summary: List Employees Work Shifts.
      description: |
        Lists Employees work Shifts. Sort by time, latest first.
      security:
        - BearerAuth: [manager]
      tags:
        - EmployeeWorkShifts
        - SpecManagementUI
      parameters:
        - name: employeeId
          required: true
          in: path
          description: employee's ID
          schema:
            type: string
            format: uuid
        - name: startedAfter
          in: query
          description: Filter work shifts started after specified date.
          schema:
            type: string
            format: date-time
        - name: startedBefore
          in: query
          description: Filter work shifts started before specified date.
          schema:
            type: string
            format: date-time
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
            default: 0
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: List of employee work shifts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EmployeeWorkShift"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/v1/employees/{employeeId}/workEvents":
    get:
      operationId: listEmployeeWorkEvents
      summary: List Employees Work Events.
      description: Lists Employees Work Events. Sort by time, latest first.
      security:
        - BearerAuth: [manager, driver, employee]
      tags:
        - WorkEvents
        - SpecApp
        - SpecManagementUI
      parameters:
        - name: employeeId
          required: true
          in: path
          description: employee's ID
          schema:
            type: string
            format: uuid
        - name: employeeWorkShiftId
          in: query
          description: Filter work events by a specific work shift of the employee
          schema:
            type: string
            format: uuid
        - name: after
          in: query
          description: Filter work events after specified date.
          schema:
            type: string
            format: date-time
        - name: before
          in: query
          description: Filter work events before specified date.
          schema:
            type: string
            format: date-time
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
            default: 0
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: List of work events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkEvent"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      operationId: createEmployeeWorkEvent
      summary: Create Employees Work Event.
      description: |
        Creates Employees Work Event.

        If the work event starts a new shift, a new employee work shift is also created automatically.
      security:
        - BearerAuth: [manager, driver, employee]
      tags:
        - WorkEvents
        - SpecApp
        - SpecManagementUI
      parameters:
        - name: employeeId
          required: true
          in: path
          description: employee's ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkEvent"
      responses:
        "201":
          description: Created work event
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkEvent"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/v1/employees/{employeeId}/workEvents/{workEventId}":
    get:
      operationId: findEmployeeWorkEvent
      summary: Find an employee's work event.
      description: Finds an employee's work event by ID.
      security:
        - BearerAuth: [manager, driver, employee]
      tags:
        - WorkEvents
        - SpecApp
        - SpecManagementUI
      parameters:
        - name: employeeId
          required: true
          in: path
          description: employee's ID
          schema:
            type: string
            format: uuid
        - name: workEventId
          required: true
          in: path
          description: work event's ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found work event
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkEvent"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      operationId: updateEmployeeWorkEvent
      summary: Update Employee's Work Event.
      description: Updates Employee's Work Event.
      security:
        - BearerAuth: [manager, employee]
      tags:
        - WorkEvents
        - SpecApp
        - SpecManagementUI
      parameters:
        - name: employeeId
          required: true
          in: path
          description: employee's ID
          schema:
            type: string
            format: uuid
        - name: workEventId
          required: true
          in: path
          description: work event's ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkEvent"
      responses:
        "200":
          description: Updated time entry
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkEvent"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      operationId: deleteEmployeeWorkEvent
      summary: Delete Employee's Work Event.
      description: |
        Deletes Employee's Work Event. Only accessible by managers. If deleting the last remaining work
        event from an employee work shift, the shift and its related work shift hours should also be deleted.
      security:
        - BearerAuth: [manager]
      tags:
        - WorkEvents
        - SpecManagementUI
      parameters:
        - name: employeeId
          required: true
          in: path
          description: employee's ID
          schema:
            type: string
            format: uuid
        - name: workEventId
          required: true
          in: path
          description: work event's ID
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Successfully deleted the time entry
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/v1/workShiftHours":
    get:
      operationId: listWorkShiftHours
      summary: List Work Shift Hours.
      description: Lists Work Shift Hours. There can be 0-1 work shift hours per employee per work shift per work type.
      security:
        - BearerAuth: [manager]
      tags:
        - WorkShiftHours
        - SpecManagementUI
      parameters:
        - name: employeeId
          in: query
          description: filter work shift hours by employee's ID
          schema:
            type: string
            format: uuid
        - name: employeeWorkShiftId
          in: query
          description: |
            filter work shift hours by employee work shift's ID.
            Cannot be used with employeeWorkShiftStartedAfter or employeeWorkShiftStartedBefore.
          schema:
            type: string
            format: uuid
        - name: workType
          in: query
          description: filter work shift hours by work type
          schema:
            $ref: "#/components/schemas/WorkEventType"
        - name: employeeWorkShiftStartedAfter
          in: query
          description: filter work shift hours by employee work shift started after specified date
          schema:
            type: string
            format: date-time
        - name: employeeWorkShiftStartedBefore
          in: query
          description: filter work shift hours by employee work shift started before specified date
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: List of work shift hours
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkShiftHours"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createWorkShiftHours
      summary: Create Work Shift Hours.
      description: |
        Creates Work Shift Hours.

        Attempt to create a new hours should fail if an hours with the same employee,
        employee work shift and work type already exists.
      security:
        - BearerAuth: [manager]
      tags:
        - WorkShiftHours
        - SpecManagementUI
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkShiftHours"
      responses:
        "201":
          description: Created work shift hours
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkShiftHours"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/v1/workShiftHours/{workShiftHoursId}":
    get:
      operationId: findWorkShiftHours
      summary: Find Work Shift Hours.
      description: Finds Work Shift Hours.
      security:
        - BearerAuth: [manager]
      tags:
        - WorkShiftHours
        - SpecManagementUI
      parameters:
        - name: workShiftHoursId
          required: true
          in: path
          description: ID of work shift hours
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Work shift hours
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkShiftHours"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateWorkShiftHours
      summary: Update Work Shift Hours.
      description: |
        Updates Work Shift Hours.

        Trying to update employeeId, employeeWorkShiftId, or workType from work shift hours should fail.
        To update actual hours, the work shift hours must not be approved.
      security:
        - BearerAuth: [manager]
      tags:
        - WorkShiftHours
        - SpecManagementUI
      parameters:
        - name: workShiftHoursId
          required: true
          in: path
          description: ID of work shift hours
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkShiftHours"
      responses:
        "200":
          description: Updated work shift hours
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkShiftHours"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/holidays:
    get:
      operationId: listHolidays
      summary: List Holidays.
      description: Lists holidays.
      security:
        - BearerAuth: [manager]
      tags:
        - Holidays
        - SpecManagementUI
      parameters:
        - name: year
          in: query
          description: What years holidays to list.
          schema:
            type: integer
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
            default: 0
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: List of holidays
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Holiday"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createHoliday
      summary: Create Holiday.
      description: Creates Holiday.
      security:
        - BearerAuth: [manager]
      tags:
        - Holidays
        - SpecManagementUI
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Holiday"
      responses:
        "201":
          description: Created Holiday
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Holiday"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/v1/holidays/{holidayId}":
    get:
      operationId: findHoliday
      summary: Find an Holiday.
      description: Finds an Holiday by ID.
      security:
        - BearerAuth: [manager]
      tags:
        - Holidays
        - SpecManagementUI
      parameters:
        - name: holidayId
          required: true
          in: path
          description: Holiday's ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found Holiday
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Holiday"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateHoliday
      summary: Update Holiday.
      description: Updates Holiday.
      security:
        - BearerAuth: [manager]
      tags:
        - Holidays
        - SpecManagementUI
      parameters:
        - name: holidayId
          required: true
          in: path
          description: Holidays's ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Holiday"
      responses:
        "200":
          description: Updated Holiday
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Holiday"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteHoliday
      summary: Delete Holiday.
      description: Deletes Holiday.
      security:
        - BearerAuth: [manager]
      tags:
        - Holidays
        - SpecManagementUI
      parameters:
        - name: holidayId
          required: true
          in: path
          description: Holiday's ID
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty response indicating successful removal
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    Error:
      type: object
      description: Error object
      required:
        - status
        - message
      properties:
        status:
          type: integer
          format: int32
        message:
          type: string

    Driver:
      type: object
      description: Represents single truck driver
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        displayName:
          type: string
          description: Driver display name
        archivedAt:
          type: string
          format: date-time
          description: >
            Setting the archivedAt time marks the driver as archived.
            Drivers marked as archived will not appear in list requests unless archived filter is set to true.
            Archived driver cannot be updated, unless archivedAt is first set to null.

    Employee:
      type: object
      description: Represents single employee
      required:
        - firstName
        - lastName
        - type
        - salaryGroup
        - office
        - employeeNumber
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        firstName:
          type: string
          description: Employee's first name
        lastName:
          type: string
          description: Employee's last name
        driverCardId:
          type: string
          description: Employee's driver card ID.
        type:
          $ref: "#/components/schemas/EmployeeType"
        salaryGroup:
          $ref: "#/components/schemas/SalaryGroup"
        office:
          $ref: "#/components/schemas/Office"
        regularWorkingHours:
          type: number
          format: float
          description: |
            Employee's regular working hours per two weeks. Used for employee's whose salary group is either Driver or VPLogistics.
        driverCardLastReadOut:
          type: string
          format: date-time
          description: |
            Last time the driver card was read out. In the beginning this should be set manually but later probably automated.
        employeeNumber:
          type: string
          description: Employee's number. Should be unique.
        email:
          type: string
          description: Employee's email address
        phoneNumber:
          type: string
          description: Employee's phone number
        archivedAt:
          type: string
          format: date-time
          description: >
            Setting the archivedAt time marks the employee as archived.
            Employees marked as archived will not appear in list requests unless archived filter is set to true.
            Archived employee cannot be updated, unless archivedAt is first set to null.

    EmployeeType:
      type: string
      description: |
        Employee's type described as finnish abbreviation. UI implementations should translate these to more human readable form.
        Pakettiautonkuljettaja (PA)
        Kuorma-auton kuljettaja (KA)
        Alihankkija (AH)
        Vuokratyöntekijä (VK)
        Työharjoittelija (TH)
        Tilapäistyöntekijä (TP)
        Ajojärjestelijä (AJ)
        Esimies (JH)
        Aikatuntipalkka (AP)
        Kuukausipalkka (KK)
        Ei-aktiivinen (POIS)
        Täysperäkuljettaja (TPK)
      enum: [PA, KA, AH, VK, TH, TP, AJ, JH, AP, KK, POIS, TPK]

    SalaryGroup:
      type: string
      description: |
        Employee's salary group
        Kuljettaja (Driver) - Should be default IF the employees office is not KOTKA
        VP-Logistics (VPlogistics)
        Office
        Terminal
      enum: [DRIVER, VPLOGISTICS, OFFICE, TERMINAL]

    Office:
      type: string
      description: Employee's office. Salary group should be set to VPLogistics if the office is KOTKA
      enum: [KOTKA, KOUVOLA, RAUHA]

    EmployeeWorkShift:
      type: object
      description: |
        Represents single employee work shift. Each work event must always relate to a work shift.

        A new employee work shift is automatically created, when employee starts a new shift. A new
        shift is started when the last recorded WorkEvent from the employee either is of type SHIFT_END
        or is of type BREAK and has been going on longer than 3 hours. A new shift is also created if
        there is no previous work events for the employee.

        Employee work shift always relates to a single date. This is important for calculating the total
        working hours for employee salaries for a single work period. The date is derived by the start
        date of the shift, which is the time of the first work event of the shift.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date:
          type: string
          format: date
          readOnly: true
          description: Work shift date. Derived from the first work event of the shift.
        employeeId:
          type: string
          format: uuid
          readOnly: true
          description: Employee's ID

    WorkEvent:
      type: object
      description: Represents single work event
      required:
        - employeeId
        - time
        - workEventType
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        employeeId:
          type: string
          format: uuid
          description: Employee's ID
        employeeWorkShiftId:
          type: string
          format: uuid
          readOnly: true
          description: employee work shift ID
        time:
          type: string
          format: date-time
          description: Work event time
        workEventType:
          $ref: "#/components/schemas/WorkEventType"

    WorkShiftHours:
      type: object
      description: |
        Represents a single work shift hours.

        Work shift hours contain the total hours for a specific employee, work shift and work type. The hours are always
        calculated dynamically during a request.

        Work shift hours also contains the actual hours that have been manually set by a supervisor. The actual hours
        should always be prioritized over the calculated hours when displaying the aggregated hours and sending the
        data to payroll.

        Work shift hours are created automatically if not present when total working hours for a specific employee, work
        shift and work type is requested. It can also be created through POST endpoint, in which case the actual hours
        needs to be filled.

        Only a single work shift hours per employee per work shift per work type is allowed. If one already exists, it
        should be updated. If the entry has been approved, it needs to be disapproved first to update the actual hours.
      required:
        - employeeId
        - employeeWorkShiftId
        - workEventType
        - calculatedHours
        - approved
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        employeeId:
          type: string
          format: uuid
          description: Employee's ID
        employeeWorkShiftId:
          type: string
          format: uuid
          description: Employee work shift's ID
        workEventType:
          $ref: "#/components/schemas/WorkEventType"
        calculatedHours:
          type: number
          format: float
          readOnly: true
          description: |
            Calculated hours for the employee work shift for corresponding work type. This should always be dynamically
            calculated from the actual work events in the work shift. Cannot be updated.
        actualHours:
          type: number
          format: float
          description: |
            Actual, manually recorded hours for the employee work shift for corresponding work type. It is null until
            the hours are manually set.
        approved:
          type: boolean
          description: |
            Whether the work shift time entry has been approved by a supervisor. Actual hours cannot be updated unless
            approved is set to false.

    WorkEventType:
      type: string
      description: |
        Work event types. UI implementations should translate these to more human readable form.

        *Office/Terminal work types*
        - VEGETABLE (Hevi)
        - DRY (Kuiva)
        - MEAT_CELLAR (Lihakellari)
        - MEIRA (Meira)
        - FROZEN (Pakaste)
        - PALTE (Palte)
        - BREWERY (Panimo)
        - GREASE (Rasva)
        - LOGIN
        - LOGOUT

        *Common work types*
        - OTHER_WORK (Muu työ)
        - BREAK (Tauko)
        - SHIFT_START
        - SHIFT_END
        - UNKNOWN

        *Driver work types*
        - DRIVE
        - LOADING
        - UNLOADING
        - AVAILABILITY
        - DRIVER_CARD_INSERTED
        - DRIVER_CARD_REMOVED

      enum:
        - VEGETABLE
        - DRY
        - MEAT_CELLAR
        - MEIRA
        - FROZEN
        - PALTE
        - BREWERY
        - GREASE
        - LOGIN
        - LOGOUT
        - OTHER_WORK
        - BREAK
        - SHIFT_START
        - SHIFT_END
        - UNKNOWN
        - DRIVE
        - LOADING
        - UNLOADING
        - AVAILABILITY
        - DRIVER_CARD_INSERTED
        - DRIVER_CARD_REMOVED

    Holiday:
      type: object
      description: Represents a single holiday
      required:
        - date
        - name
        - compensationType
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date:
          type: string
          format: date
          description: Holiday date
        name:
          type: string
          description: Holiday name
        compensationType:
          $ref: "#/components/schemas/CompensationType"
        creatorId:
          type: string
          format: uuid
          description: Creator's ID
        lastModifierId:
          type: string
          format: uuid
          description: Last modifier's ID
        createdAt:
          type: string
          format: date-time
          description: Creation time
        modifiedAt:
          type: string
          format: date-time
          description: Last modified time

    CompensationType:
      type: string
      enum:
        - PUBLIC_HOLIDAY_ALLOWANCE
        - DAY_OFF_WORK_ALLOWANCE

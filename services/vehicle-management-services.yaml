openapi: 3.0.3
info:
  version: 1.0.0
  title: VP-Kuljetus Vehicle Management Services
security:
  - BearerAuth:
      - driver
      - manager
  - DataReceiverApiKeyAuth: []
  - KeycloakApiKeyAuth: []
paths:
  /v1/system/ping:
    get:
      operationId: ping
      summary: Replies with pong
      description: Replies ping with pong
      security: []
      tags:
        - System
      responses:
        "200":
          description: Pong
          content:
            text/plain:
              schema:
                type: string
  /v1/publicTrucks:
    get:
      operationId: listPublicTrucks
      summary: List PublicTrucks.
      description: Lists public info about each truck.
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - PublicTrucks
      parameters:
        - name: vin
          in: query
          description: Filter results by vin
          schema:
            type: string
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of trucks with only public info
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PublicTruck"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/trucks:
    get:
      operationId: listTrucks
      summary: List Trucks.
      description: Lists Trucks.
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - Trucks
      parameters:
        - name: plateNumber
          in: query
          description: Filter results by plate number
          schema:
            type: string
        - name: archived
          in: query
          description: Filter results by archived status
          schema:
            type: boolean
        - name: sortBy
          in: query
          description: Sort results by field
          schema:
            $ref: "#/components/schemas/TruckSortByField"
        - name: sortDirection
          in: query
          description: Sort direction
          schema:
            $ref: "#/components/schemas/SortOrder"
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of trucks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Truck"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createTruck
      summary: Create truck
      description: Create new truck
      security:
        - BearerAuth:
            - manager
      tags:
        - Trucks
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Truck"
        description: Payload
        required: true
      responses:
        "200":
          description: Created truck
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Truck"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/trucks/{truckId}:
    get:
      operationId: findTruck
      summary: Find a truck.
      description: Finds a truck by id.
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - Trucks
      parameters:
        - name: truckId
          required: true
          in: path
          description: trucks id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found truck
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Truck"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateTruck
      summary: Updates trucks
      description: Updates single truck
      security:
        - BearerAuth:
            - manager
      tags:
        - Trucks
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Truck"
        description: Payload
        required: true
      parameters:
        - name: truckId
          required: true
          in: path
          description: truck id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Updated truck
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Truck"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteTruck
      summary: Deletes truck
      description: Deletes truck. For non-production use. Returns forbidden in
        production environment.
      security:
        - BearerAuth:
            - manager
      tags:
        - Trucks
      parameters:
        - name: truckId
          required: true
          in: path
          description: truck id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty response indicating successful removal
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/trucks/{truckId}/driverCards:
    get:
      operationId: listTruckDriverCards
      summary: Lists truck driver cards
      description: Lists truck driver cards. Used to check if a truck has a driver
        card inserted.
      security:
        - BearerAuth:
            - driver
        - KeycloakApiKeyAuth: []
      tags:
        - Trucks
      parameters:
        - name: truckId
          required: true
          in: path
          description: truck ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of truck driver cards. Contains either 0 or 1 cards.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TruckDriverCard"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createTruckDriverCard
      summary: Create truck driver card
      description: >
        Create new truck driver card.


        If a card with same truck ID and card ID is already found with removedAt set, the existing card is restored.

        If a card with different truck ID and card ID is already found with removedAt set, the previous card is

        immediately deleted and the new card is created. If a card with the same truck ID and card ID is found with

        removedAt not set, the request is rejected with a 409 Conflict response.
      security:
        - DataReceiverApiKeyAuth: []
      tags:
        - Trucks
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TruckDriverCard"
        description: Payload
        required: true
      parameters:
        - name: truckId
          required: true
          in: path
          description: truck ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Created driver card
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TruckDriverCard"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/trucks/{truckId}/driverCards/{driverCardId}:
    delete:
      operationId: deleteTruckDriverCard
      summary: Deletes truck driver card
      description: >
        Deletes single truck driver card. Driver cards are deleted when they are
        removed from the truck.


        The card is first soft-deleted by setting removedAt to value sent in X-Removed-At header. A background process

        then checks frequently for driver cards removed over a configurable grace period ago and deletes them

        permanently. This is done to prevent false positive driver card states coming in from telematics device.
      security:
        - DataReceiverApiKeyAuth: []
      tags:
        - Trucks
      parameters:
        - name: truckId
          required: true
          in: path
          description: truck ID
          schema:
            type: string
            format: uuid
        - name: driverCardId
          required: true
          in: path
          description: driver card ID
          schema:
            type: string
        - name: X-Removed-At
          required: true
          in: header
          description: Timestamp when the driver card was removed from the truck
          schema:
            type: string
            format: date-time
      responses:
        "204":
          description: Empty response indicating successful removal
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/trucks/{truckId}/locations:
    post:
      operationId: createTruckLocation
      summary: Create truck location
      description: Create new truck location. Used by vehicle data receiver to send
        truck location data.
      security:
        - DataReceiverApiKeyAuth: []
      tags:
        - Trucks
      parameters:
        - name: truckId
          required: true
          in: path
          description: truck id
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TruckLocation"
        description: Payload
        required: true
      responses:
        "201":
          description: Received data
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      operationId: listTruckLocations
      summary: List Truck locations
      description: Lists Truck locations.
      security:
        - BearerAuth:
            - manager
      tags:
        - Trucks
      parameters:
        - name: truckId
          required: true
          in: path
          description: truck id
          schema:
            type: string
            format: uuid
        - name: after
          in: query
          description: Filter results after given date-time
          schema:
            type: string
            format: date-time
        - name: before
          in: query
          description: Filter results before given date-time
          schema:
            type: string
            format: date-time
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of truck locations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TruckLocation"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/trucks/{truckId}/speeds:
    post:
      operationId: createTruckSpeed
      summary: Create truck speed
      description: Create new truck speed. Used by vehicle data receiver to send truck
        speed data.
      security:
        - DataReceiverApiKeyAuth: []
      tags:
        - Trucks
      parameters:
        - name: truckId
          required: true
          in: path
          description: truck id
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TruckSpeed"
        description: Payload
        required: true
      responses:
        "201":
          description: Received data
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      operationId: listTruckSpeeds
      summary: List Truck speeds
      description: Lists Truck speeds.
      security:
        - BearerAuth:
            - manager
      tags:
        - Trucks
      parameters:
        - name: truckId
          required: true
          in: path
          description: truck id
          schema:
            type: string
            format: uuid
        - name: after
          in: query
          description: Filter results after given date-time
          schema:
            type: string
            format: date-time
        - name: before
          in: query
          description: Filter results before given date-time
          schema:
            type: string
            format: date-time
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of truck speeds
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TruckSpeed"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/trucks/{truckId}/driveStates:
    get:
      operationId: listDriveStates
      summary: List drive states.
      description: Lists drive states for truck.
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - Trucks
      parameters:
        - name: truckId
          required: true
          in: path
          description: truck id
          schema:
            type: string
            format: uuid
        - name: driverId
          in: query
          description: Filter results by driver ID
          schema:
            type: string
            format: uuid
        - name: state
          in: query
          description: Filter results by driver state
          schema:
            type: array
            items:
              $ref: "#/components/schemas/TruckDriveStateEnum"
        - name: after
          in: query
          description: Filter results after given date-time
          schema:
            type: string
            format: date-time
        - name: before
          in: query
          description: Filter results before given date-time
          schema:
            type: string
            format: date-time
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of drive states
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TruckDriveState"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createDriveState
      summary: Create drive state
      description: Create new drive state for truck
      security:
        - DataReceiverApiKeyAuth: []
      tags:
        - Trucks
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TruckDriveState"
        description: Payload
        required: true
      parameters:
        - name: truckId
          required: true
          in: path
          description: truck id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Created drive state
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/trucks/{truckId}/odometerReadings:
    get:
      operationId: listTruckOdometerReadings
      summary: List truck odometer readings
      description: Lists truck odometer readings.
      security:
        - BearerAuth:
            - manager
      tags:
        - Trucks
      parameters:
        - name: truckId
          required: true
          in: path
          description: truck id
          schema:
            type: string
            format: uuid
        - name: after
          in: query
          description: Filter results after given date-time
          schema:
            type: string
            format: date-time
        - name: before
          in: query
          description: Filter results before given date-time
          schema:
            type: string
            format: date-time
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of truck odometer readings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TruckOdometerReading"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createTruckOdometerReading
      summary: Create truck odometer reading
      description: Create new truck odometer reading. Used by vehicle data receiver to
        send truck odometer reading data.
      security:
        - DataReceiverApiKeyAuth: []
      tags:
        - Trucks
      parameters:
        - name: truckId
          required: true
          in: path
          description: truck id
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TruckOdometerReading"
        description: Payload
        required: true
      responses:
        "201":
          description: Received data
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/towables:
    get:
      operationId: listTowables
      summary: List Towables.
      description: Lists Towables.
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - Towables
      parameters:
        - name: plateNumber
          in: query
          description: Filter results by plate number
          schema:
            type: string
        - name: archived
          in: query
          description: Filter results by archived status
          schema:
            type: boolean
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of towables
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Towable"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createTowable
      summary: Create towable
      description: Create new towable
      security:
        - BearerAuth:
            - manager
      tags:
        - Towables
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Towable"
        description: Payload
        required: true
      responses:
        "200":
          description: Created towable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Towable"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/towables/{towableId}:
    get:
      operationId: findTowable
      summary: Find a towable.
      description: Finds a towable by id.
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - Towables
      parameters:
        - name: towableId
          required: true
          in: path
          description: towables id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found towable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Towable"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateTowable
      summary: Updates towables
      description: Updates single towable
      security:
        - BearerAuth:
            - manager
      tags:
        - Towables
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Towable"
        description: Payload
        required: true
      parameters:
        - name: towableId
          required: true
          in: path
          description: towable id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Updated towable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Towable"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteTowable
      summary: Deletes towable
      description: Deletes towable. For non-production use. Returns forbidden response
        in production environment.
      security:
        - BearerAuth:
            - manager
      tags:
        - Towables
      parameters:
        - name: towableId
          required: true
          in: path
          description: towable id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty response indicating successful removal
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/vehicles:
    get:
      operationId: listVehicles
      summary: List Vehicles.
      description: Lists Vehicles.
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - Vehicles
      parameters:
        - name: truckId
          in: query
          description: Filter results by truck id
          schema:
            type: string
            format: uuid
        - name: archived
          in: query
          description: Filter results by archived status
          schema:
            type: boolean
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of vehicles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Vehicle"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createVehicle
      summary: Create vehicle
      description: >
        Create new vehicle. Vehicles are the history of the combinations of
        towables behind a truck. When a vehicle structure needs to be updated, a
        new vehicle with updated structure should be created. This updates the
        active vehicle for the truck and archives the previous one.
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - Vehicles
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Vehicle"
        description: Payload
        required: true
      responses:
        "200":
          description: Created vehicle
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vehicle"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/vehicles/{vehicleId}:
    get:
      operationId: findVehicle
      summary: Find a vehicle.
      description: Finds a vehicle by id.
      security:
        - BearerAuth:
            - driver
            - manager
      tags:
        - Vehicles
      parameters:
        - name: vehicleId
          required: true
          in: path
          description: vehicles id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found vehicle
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vehicle"
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteVehicle
      summary: Deletes vehicle
      description: Deletes vehicle. For non-production use. Returns forbidden response
        in production environment.
      security:
        - BearerAuth:
            - manager
      tags:
        - Vehicles
      parameters:
        - name: vehicleId
          required: true
          in: path
          description: vehicle id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty response indicating successful removal
        default:
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    DataReceiverApiKeyAuth:
      type: apiKey
      in: header
      name: X-DataReceiver-API-Key
    KeycloakApiKeyAuth:
      type: apiKey
      in: header
      name: X-Keycloak-API-Key
  schemas:
    Error:
      type: object
      description: Error object
      required:
        - status
        - message
      properties:
        status:
          type: integer
          format: int32
        message:
          type: string
    PublicTruck:
      type: object
      description: Represent public info of single truck
      required:
        - plateNumber
        - vin
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        plateNumber:
          type: string
        vin:
          type: string
          description: >
            Truck identification number. This is unique for each truck and
            should be used as a hardware identifier for this specific truck.
    Truck:
      type: object
      description: Represent single truck
      required:
        - plateNumber
        - type
        - vin
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        plateNumber:
          type: string
        type:
          type: string
          enum:
            - TRUCK
            - SEMI_TRUCK
        vin:
          type: string
          description: >
            Truck identification number. This is unique for each truck and
            should be used as a hardware identifier for this specific truck.
        activeVehicleId:
          type: string
          format: uuid
          readOnly: true
          description: >
            Active vehicle id. This is the current vehicle that the truck is
            part of. It updates whenever the vehicle structure is updated.
        creatorId:
          type: string
          readOnly: true
          format: uuid
        createdAt:
          format: date-time
          type: string
          readOnly: true
        lastModifierId:
          type: string
          readOnly: true
          format: uuid
        modifiedAt:
          format: date-time
          type: string
          readOnly: true
        archivedAt:
          type: string
          format: date-time
          description: >
            Setting the archivedAt time marks the truck as archived. Trucks
            marked as archived will not appear in list requests unless archived
            filter is set to true. Archived truck cannot be updated, unless
            archivedAt is first set to null.
    Towable:
      type: object
      description: Represent single towable
      required:
        - plateNumber
        - type
        - vin
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        plateNumber:
          type: string
        type:
          type: string
          enum:
            - TRAILER
            - SEMI_TRAILER
            - DOLLY
        vin:
          type: string
          description: >
            Towable identification number. This is unique for each towable and
            should be used as a hardware identifier for this specific towable.
        creatorId:
          type: string
          readOnly: true
          format: uuid
        createdAt:
          format: date-time
          type: string
          readOnly: true
        lastModifierId:
          type: string
          readOnly: true
          format: uuid
        modifiedAt:
          format: date-time
          type: string
          readOnly: true
        archivedAt:
          type: string
          format: date-time
          description: >
            Setting the archivedAt time marks the towable as archived. Towables
            marked as archived will not appear in list requests unless archived
            filter is set to true. Archived towable cannot be updated, unless
            archivedAt is first set to null.
    Vehicle:
      type: object
      description: Represent single vehicle
      required:
        - truckId
        - towableIds
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        truckId:
          type: string
          description: Truck that towing the vehicle
          format: uuid
        towableIds:
          type: array
          description: >
            List of attached towables to vehicle. Order of towables should
            reflect the order of towables in the vehicle where first towable is
            the closest to the truck.
          items:
            type: string
            format: uuid
        creatorId:
          type: string
          readOnly: true
          format: uuid
        createdAt:
          format: date-time
          type: string
          readOnly: true
        lastModifierId:
          type: string
          readOnly: true
          format: uuid
        modifiedAt:
          format: date-time
          type: string
          readOnly: true
        archivedAt:
          type: string
          format: date-time
          description: >
            Setting the archivedAt time marks the vehicle as archived. Vehicles
            marked as archived will not appear in list requests unless archived
            filter is set to true. Archived vehicle cannot be updated, unless
            archivedAt is first set to null.
    TruckDriveState:
      type: object
      required:
        - timestamp
        - state
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Truck drive state ID
        timestamp:
          type: integer
          format: int64
          description: Timestamp for truck drive state
        state:
          $ref: "#/components/schemas/TruckDriveStateEnum"
        driverId:
          type: string
          format: uuid
          readOnly: true
          description: Driver ID.
        driverCardId:
          type: string
          description: Driver card ID. This is used to identify the driver when creating a
            new drive state.
    TruckDriveStateEnum:
      type: string
      enum:
        - REST
        - DRIVER_AVAILABLE
        - WORK
        - DRIVE
        - ERROR
        - NOT_AVAILABLE
    TruckLocation:
      type: object
      required:
        - timestamp
        - latitude
        - longitude
        - heading
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        timestamp:
          type: integer
          format: int64
          description: Timestamp for truck speed
        latitude:
          type: number
          format: double
          description: Latitude in degrees.
        longitude:
          type: number
          format: double
          description: Longitude in degrees.
        heading:
          type: number
          format: double
          description: heading in degrees.
    TruckSpeed:
      type: object
      required:
        - timestamp
        - speed
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Truck speed ID
        timestamp:
          type: integer
          format: int64
          description: Timestamp for truck speed. Unix timestamp in milliseconds.
        speed:
          type: number
          format: float
    TruckDriverCard:
      type: object
      required:
        - id
        - timestamp
      properties:
        id:
          type: string
          description: Driver card ID
        timestamp:
          type: integer
          format: int64
          description: Timestamp for driver card insertion. Unix timestamp in milliseconds.
        removedAt:
          type: string
          format: date-time
          description: Removed at. Used to check for grace period for driver card removal.
    TruckSortByField:
      type: string
      enum:
        - NAME
        - PLATE_NUMBER
    SortOrder:
      type: string
      enum:
        - ASCENDING
        - DESCENDING
    TruckOdometerReading:
      type: object
      required:
        - timestamp
        - odometerReading
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Truck odometer ID
        timestamp:
          type: integer
          format: int64
          description: Timestamp for truck odometer.
        odometerReading:
          type: integer
          format: int32
          description: Odometer reading in meters. See [Teltonika FMC650 Data Sending
            Parameters ID - Tachograph Data
            Elements](https://wiki.teltonika-gps.com/view/FMC650_Teltonika_Data_Sending_Parameters_ID#Tachograph_data_elements)

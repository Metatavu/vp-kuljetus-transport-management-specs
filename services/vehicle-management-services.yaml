openapi: 3.0.3
info:
  version: 1.0.0
  title: VP-Kuljetus Vehicle Management Services

security:
  - BearerAuth: [driver, manager]
  - ApiKeyAuth: []

x-tyk-api-gateway:
  info:
    id: vehicle-management-service
    orgId: vp
    name: Vehicle Management Services
    state:
      active: true
  upstream:
    url: http://vehicle-management
  server:
    listenPath:
      value: /vehicle-management/
      strip: true

paths:
  /v1/system/ping:
    get:
      operationId: ping
      summary: Replies with pong
      description: Replies ping with pong
      security: []
      tags:
        - System
      responses:
        "200":
          description: Pong
          content:
            text/plain:
              schema:
                type: string

  /v1/trucks:
    get:
      operationId: listTrucks
      summary: List Trucks.
      description: Lists Trucks.
      security:
        - BearerAuth: [driver, manager]
      tags:
        - Trucks
        - SpecApp
        - SpecManagementUI
      parameters:
        - name: plateNumber
          in: query
          description: Filter results by plate number
          schema:
            type: string
        - name: includeArchived
          in: query
          description: Include archived trucks
          schema:
            type: boolean
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of trucks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Truck"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createTruck
      summary: Create truck
      description: Create new truck
      security:
        - BearerAuth: [manager]
      tags:
        - Trucks
        - SpecManagementUI
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Truck"
        description: Payload
        required: true
      responses:
        "200":
          description: Created truck
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Truck"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/v1/trucks/{truckId}":
    get:
      operationId: findTruck
      summary: Find a truck.
      description: Finds a truck by id.
      security:
        - BearerAuth: [driver, manager]
      tags:
        - Trucks
        - SpecApp
        - SpecManagementUI
      parameters:
        - name: truckId
          required: true
          in: path
          description: trucks id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found truck
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Truck"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateTruck
      summary: Updates trucks
      description: Updates single truck
      security:
        - BearerAuth: [manager]
      tags:
        - Trucks
        - SpecManagementUI
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Truck"
        description: Payload
        required: true
      parameters:
        - name: truckId
          required: true
          in: path
          description: truck id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Updated truck
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Truck"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      operationId: deleteTruck
      summary: Deletes truck
      description: Deletes truck. For non-production use. Returns forbidden in production environment.
      security:
        - BearerAuth: [manager]
      tags:
        - Trucks
      parameters:
        - name: truckId
          required: true
          in: path
          description: truck id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty response indicating successful removal
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/towables:
    get:
      operationId: listTowables
      summary: List Towables.
      description: Lists Towables.
      security:
        - BearerAuth: [driver, manager]
      tags:
        - Towables
        - SpecApp
        - SpecManagementUI
      parameters:
        - name: plateNumber
          in: query
          description: Filter results by plate number
          schema:
            type: string
        - name: includeArchived
          in: query
          description: Include archived towables
          schema:
            type: boolean
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of towables
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Towable"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createTowable
      summary: Create towable
      description: Create new towable
      security:
        - BearerAuth: [manager]
      tags:
        - Towables
        - SpecManagementUI
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Towable"
        description: Payload
        required: true
      responses:
        "200":
          description: Created towable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Towable"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/v1/towables/{towableId}":
    get:
      operationId: findTowable
      summary: Find a towable.
      description: Finds a towable by id.
      security:
        - BearerAuth: [driver, manager]
      tags:
        - Towables
        - SpecApp
        - SpecManagementUI
      parameters:
        - name: towableId
          required: true
          in: path
          description: towables id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found towable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Towable"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateTowable
      summary: Updates towables
      description: Updates single towable
      security:
        - BearerAuth: [manager]
      tags:
        - Towables
        - SpecManagementUI
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Towable"
        description: Payload
        required: true
      parameters:
        - name: towableId
          required: true
          in: path
          description: towable id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Updated towable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Towable"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      operationId: deleteTowable
      summary: Deletes towable
      description: Deletes towable. For non-production use. Returns forbidden response in production environment.
      security:
        - BearerAuth: [manager]
      tags:
        - Towables
      parameters:
        - name: towableId
          required: true
          in: path
          description: towable id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty response indicating successful removal
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/telematics/{vin}:
    post:
      operationId: receiveTelematicData
      summary: Receives telematic data entry
      description: Receives telematic data entry
      security:
        - ApiKeyAuth: []
      tags:
        - Telematics
        - SpecVehicleDataReceiver
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TelematicData"
        description: Payload
        required: true
      parameters:
        - name: vin
          required: true
          in: path
          description: Truck or towable vehicle identification number
          schema:
            type: string
      responses:
        "204":
          description: Success
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/vehicles:
    get:
      operationId: listVehicles
      summary: List Vehicles.
      description: Lists Vehicles.
      security:
        - BearerAuth: [driver, manager]
      tags:
        - Vehicles
        - SpecApp
        - SpecManagementUI
      parameters:
        - name: truckId
          in: query
          description: Filter results by truck id
          schema:
            type: string
            format: uuid
        - name: includeArchived
          in: query
          description: Include archived vehicles
          schema:
            type: boolean
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of vehicles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Vehicle"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createVehicle
      summary: Create vehicle
      description: Create new vehicle
      security:
        - BearerAuth: [manager]
      tags:
        - Vehicles
        - SpecManagementUI
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Vehicle"
        description: Payload
        required: true
      responses:
        "200":
          description: Created vehicle
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vehicle"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/v1/vehicles/{vehicleId}":
    get:
      operationId: findVehicle
      summary: Find a vehicle.
      description: Finds a vehicle by id.
      security:
        - BearerAuth: [driver, manager]
      tags:
        - Vehicles
        - SpecApp
        - SpecManagementUI
      parameters:
        - name: vehicleId
          required: true
          in: path
          description: vehicles id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found vehicle
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vehicle"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateVehicle
      summary: Updates vehicles
      description: Updates single vehicle
      security:
        - BearerAuth: [manager]
      tags:
        - Vehicles
        - SpecManagementUI
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Vehicle"
        description: Payload
        required: true
      parameters:
        - name: vehicleId
          required: true
          in: path
          description: vehicle id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Updated vehicle
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vehicle"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      operationId: deleteVehicle
      summary: Deletes vehicle
      description: Deletes vehicle. For non-production use. Returns forbidden response in production environment.
      security:
        - BearerAuth: [manager]
      tags:
        - Vehicles
      parameters:
        - name: vehicleId
          required: true
          in: path
          description: vehicle id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty response indicating successful removal
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    Error:
      type: object
      description: Error object
      required:
        - code
        - message
      properties:
        status:
          type: integer
          format: int32
        message:
          type: string

    Truck:
      type: object
      description: Represent single truck
      required:
        - plateNumber
        - type
        - vin
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        plateNumber:
          type: string
        type:
          type: string
          enum: [TRUCK, SEMI_TRUCK]
        vin:
          type: string
          description: Truck identification number. This is unique for each truck and should be used as a hardware identifier for this specific truck
        creatorId:
          type: string
          readOnly: true
          format: uuid
        createdAt:
          format: date-time
          type: string
          readOnly: true
        lastModifierId:
          type: string
          readOnly: true
          format: uuid
        modifiedAt:
          format: date-time
          type: string
          readOnly: true
        archivedAt:
          format: date-time
          type: string
          readOnly: true

    Towable:
      type: object
      description: Represent single towable
      required:
        - plateNumber
        - type
        - vin
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        plateNumber:
          type: string
        type:
          type: string
          enum: [TRAILER, SEMI_TRAILER, DOLLY]
        vin:
          type: string
          description: Towable identification number. This is unique for each towable and should be used as a hardware identifier for this specific towable
        creatorId:
          type: string
          readOnly: true
          format: uuid
        createdAt:
          format: date-time
          type: string
          readOnly: true
        lastModifierId:
          type: string
          readOnly: true
          format: uuid
        modifiedAt:
          format: date-time
          type: string
          readOnly: true
        archivedAt:
          format: date-time
          type: string
          readOnly: true

    Vehicle:
      type: object
      description: Represent single vehicle
      required:
        - truckId
        - towableIds
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        truckId:
          type: string
          description: Truck that towing the vehicle
          format: uuid
        towableIds:
          type: array
          description: |
            List of attached towables to vehicle. Order of towables should reflect the order of towables in the vehicle where first towable is the closest to the truck.
          items:
            type: string
            format: uuid
        creatorId:
          type: string
          readOnly: true
          format: uuid
        createdAt:
          format: date-time
          type: string
          readOnly: true
        lastModifierId:
          type: string
          readOnly: true
          format: uuid
        modifiedAt:
          format: date-time
          type: string
          readOnly: true
        archivedAt:
          format: date-time
          type: string
          readOnly: true

    TelematicData:
      type: object
      required:
        - timestamp
        - imei
        - speed
        - latitude
        - longitude
      properties:
        timestamp:
          type: integer
          format: int64
        imei:
          type: string
        speed:
          type: number
          format: float
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
